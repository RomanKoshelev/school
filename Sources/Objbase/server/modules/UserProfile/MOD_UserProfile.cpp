/*______________________________________________________________________________
[]                                                                            []
[] This is a part of the project 'IT'                                         []
[] Copyright (C) 2000 by the author(s) -- see below.									[]
[] All rights reserved.                                                       []
[] __________________________________________________________________________ []
[]                                                                            []
[] Name:          MOD_UserProfile.cpp														[]
[] Date:          11.октября.2000															[]
[] Author:        Roman V. Koshelev, Ekaterina B. Loupacheva 						[]
[] Description:   Работа с настройками и специфическими данными пользователей	[]
[]						Интерфейсные функции.													[]
[]____________________________________________________________________________[]
*/
#include "MOD_UserProfile.inc.h"				 




//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` ПОЛУЧЕНИЕ ДАННЫХ ОБЪЕКТА КЛАССА UserProfile											[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_UserProfile_GetData (MOD_UserProfile_Args& arg)
{
	DEBUG_STACK_NAME (MOD_UserProfile_GetData);
/*............................................................................[]
		<Login						Логин пользователя, запрашивающего операцию. Пользователь должен обладать правами просматривать данные пользователей и обладать более высоким уровнем доступа, или быть самим пользователем.
		<Password					Пароль пользователя, запрашивающего операцию.

		<objID						Идентификатор пользователя, чей профайл запрашивается.

		>Log_ObjectClassIDs		Список идентификаторов классов объектов, которые изменял (удалял, добавлял ...) пользователь
		>Log_ObjectClassNames	Список имен классов объектов, которые изменял (удалял, добавлял ...) пользователь
		>Log_ObjectIDs				Список идентификаторов объектов, которые изменял (удалял, добавлял ...) пользователь
		>Log_ObjectNames		   Список имен объектов, которые изменял (удалял, добавлял ...) пользователь
		>Log_ActionCodes			Список кодов действий, которые совершал пользователь 
		>Log_ActionDescriptions	Расшифровки кодов действий
		>Log_Times					Времена совершения действий, которые совершал пользователь

		>ExitCode					Код возврата.
		>ExitCodeComment			Текстовый комментарий к коду возврата.
*///..........................................................................[]





//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка аргументов	                                                      []                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Проверяем идентификатор пользователя
	if (!OC_Exist (OBJ_CLASS_ID_User, arg.objID))
	{
		ERR_RETURN_COMMENT_1 (ERR_SYSTEM_ERROR,"Пользователь с заданным идентификатором %u не существует",arg.objID);

	}
	
	identifier profileID = GetUserProfileIDByUserID (arg.objID);

// Если не открылся профиль -- системная ошибка
	if (profileID==NA) 
	{
		string login, name;
		UserGetLoginFullName (GetUserGUID (arg.objID), login, name);
		ERR_RETURN_COMMENT_3 (ERR_SYSTEM_ERROR, "Не удалось открыть профиль у пользователя '%s' (%s) ID=%u", login.c_str(), name.c_str(), arg.objID);
	}
	OC_UserProfile oc_profile (profileID);
//----------------------------------------------------------------------------[] 


//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
// Проверяем право доступа -- пользователь должен обладать правами просматривать данные 
//	пользователей и обладать более высоким уровнем доступа, или быть самим пользователем.
	res = USER_CHECK_ACCESS_TO_USERPROFILE (loginID, arg.objID, "R");
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Нет доступа [R] на получение данных");
	}
//----------------------------------------------------------------------------[] 








//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Возвращаем записи лога
	for (int l=0; l<oc_profile.m_Log_Action.Size(); l++)
	{
		int oc_profile_m_Log_Action =oc_profile.m_Log_Action[l];
		

		if (oc_profile_m_Log_Action>=USER_LOG_last_bad || oc_profile_m_Log_Action<=USER_LOG_first_bad)
		{
			SERVER_DEBUG_ERROR_1 ("Ошибочный тип записи (%d) в лог, исправлено", oc_profile_m_Log_Action);
			oc_profile.m_Log_ObjectGUID.Del (l);
			oc_profile.m_Log_Action		.Del (l);
			oc_profile.m_Log_Time		.Del (l);
			l --;
			continue;
		}

		arg.Log_ActionCodes			+=	oc_profile_m_Log_Action;
		arg.Log_ActionDescriptions	+=	USER_LOG_DESCRIPTION [oc_profile_m_Log_Action];

		guid gi							 = oc_profile.m_Log_ObjectGUID[l];
		arg.Log_ObjectClassIDs		+=	gi.cl;
		arg.Log_ObjectClassNames	+=	className [gi.cl];

		arg.Log_ObjectIDs				+=	gi.id;
		arg.Log_ObjectNames		   +=	MOD_GET_OBJECT_NAME (gi);
		arg.Log_Times					+=	oc_profile.m_Log_Time[l];
	}
//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]













#if 0  //{ Разблокировать функцию, когда она понадобится
//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` ИЗМЕНЕНИЕ ДАННЫХ ОБЪЕКТА КЛАССА xxx													[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_xxx_PutData (MOD_xxx_Args& arg)
{
	DEBUG_STACK_NAME (MOD_xxx_PutData);
/*............................................................................[]
*///..........................................................................[]




//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Запрашиваемый объект должен существовать
	if (!OC_Exist (OBJ_CLASS_ID_xxx, arg.objID))
	{
		ERR_RETURN_COMMENT_1 (ERR_BadID, "Запрашиваемый объект xxx[%u] не существует", arg.objID);
	}
	OC_xxx oc_xxx (arg.objID);
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
// Проверяем право доступа
	res = USER_CHECK_ACCESS_TO_XXX (loginID, arg.objID, "W");
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Нет доступа для выполнения операции");
	}
//	Проверяем уровень доступа
	if (oc_meta.m_AccessLevelThreshold <= oc_login.m_AccessLevel)
	{
		ERR_RETURN_COMMENT_2 (ERR_InsufficientAccessLevel, "Недостаточный уровень доступа (%d) для изменения объекта (%d)", int(oc_login.m_AccessLevel), int(oc_meta.m_AccessLevelThreshold));
	}
//----------------------------------------------------------------------------[] 




//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка аргументов	                                                      []                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Пользователь не может убрать зоны доступа, к которым не имеет атрибута доступа [D]
	int i,j;
	for (i=0; i<oc_meta.m_FeodGUID.Size(); i++)
	{
		guid gi = oc_meta.m_FeodGUID[i];
	//	Если зона не найдена в аргументах -- значит её выкинули, проверяем правомочность действия
		if (arg.FeodIDs.Find (gi.id)==-1)
		{
			if (USER_CHECK_ACCESS (loginID, gi.id, "D")!=ERR_OK)
			{
				string feodName;
				GetFeodName(gi.id, feodName);
				ERR_RETURN_COMMENT_2 (ERR_AccessDeny, "Пользователь не имеет права удалять объект из зоны доступа '%s'[%u]", feodName.c_str(), arg.FeodIDs[i]);
			}
		}
	}
// Пользователь не может назначить зоны доступа, к которым не имеет атрибута доступа [C]
	for (i=0; i<arg.FeodIDs.Size(); i++)
	{
		bool bFoundInRel = false;
	//	Ищем указанную зону в отношении
		for (j=0; j<oc_meta.m_FeodGUID.Size(); j++)
		{
			if (guid(oc_meta.m_FeodGUID[j]).id == arg.FeodIDs[i])
			{
				bFoundInRel = true;
				break;
			}
		}
	//	Если зона не найдена в отношении -- значит её добавили, проверяем правомочность действия
		if (!bFoundInRel && USER_CHECK_ACCESS (loginID, arg.FeodIDs[i], "C")!=ERR_OK)
		{
			string feodName;
			GetFeodName (arg.FeodIDs[i], feodName);
			ERR_RETURN_COMMENT_2 (ERR_AccessDeny, "Пользователь не имеет права вносить объект в зону доступа '%s'[%u]", feodName.c_str(), arg.FeodIDs[i]);
		}
	}
//----------------------------------------------------------------------------[] 




//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Изменяем поля объекта
	arg.Name	=	oc_xxx.m_Name;

// Проводим коррекцию базы данных в связи с изменениеями в объекте
//	...

//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]
#endif //}













#if 0  //{ Разблокировать функцию, когда она понадобится
//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` УДАЛЕНИЕ ОБЪЕКТА КЛАССА xxx																[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_xxx_Delete (MOD_xxx_Args& arg)
{
	DEBUG_STACK_NAME (MOD_xxx_Delete);
/*............................................................................[]
*///..........................................................................[]




//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Запрашиваемый объект должен существовать
	if (!OC_Exist (OBJ_CLASS_ID_xxx, arg.objID))
	{
		ERR_RETURN_COMMENT_1 (ERR_BadID, "Запрашиваемый объект xxx[%u] не существует", arg.objID);
	}
	OC_xxx oc_xxx (arg.objID);
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
// Проверяем право доступа
	res = USER_CHECK_ACCESS_TO_XXX (loginID, arg.objID, "D");
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Нет доступа [D] для удаления объекта");
	}
//----------------------------------------------------------------------------[] 





//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Проводим коррекцию базы данных в связи с уничтожением объекта
//	...

// Уничтожаем объект
	oc_xxx.Delete ();

//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]
#endif //}











/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[] END OF FILE                                                                []
[]                                                                            []
[]____________________________________________________________________________[]
*/