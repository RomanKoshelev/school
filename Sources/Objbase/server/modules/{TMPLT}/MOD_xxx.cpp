/*______________________________________________________________________________
[]                                                                            []
[] This is a part of the project 'IT'                                         []
[] Copyright (C) 2000 by the author(s) -- see below.									[]
[] All rights reserved.                                                       []
[] __________________________________________________________________________ []
[]                                                                            []
[] Name:          MOD_xxx.cpp																	[]
[] Date:          ddd.2000																		[]
[] Author:        Roman V. Koshelev															[]
[] Description:   Работа с объектами класса xxx											[]
[]						Интерфейсные функции.													[]
[]____________________________________________________________________________[]
*/
#include "MOD_xxx.inc.h"				 






#if 0  //{ Разблокировать функцию, когда она понадобится
//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` СОЗДАНИЕ НОВОГО ОБЪЕКТА КЛАССА xxx														[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_xxx_New (MOD_xxx_Args& arg)
{
	DEBUG_STACK_NAME (MOD_xxx_New);
/*............................................................................[]
*///..........................................................................[]


//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
// Проверяем право доступа -- пользователь должен иметь право создавать объекты в указанных феодах
	int f;
	for (f=0; f<arg.FeodIDs.Size(); f++)
	{
		res = USER_CHECK_ACCESS (loginID, arg.FeodIDs[f], "C");
		if (res!=ERR_OK)
		{
			string feodName;
			GetFeodName (arg.FeodIDs[f], feodName);
			ERR_RETURN_COMMENT_2 (res, "Пользователь не имеет права создавать объекты в зоне '%s'[%u]", feodName.c_str(), arg.FeodIDs[f]);
		}
	}
//----------------------------------------------------------------------------[] 



//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка аргументов	                                                      []                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Имя объекта не должно быть пустым
	if (arg.Name.IsEmpty())
	{
		ERR_RETURN_COMMENT (ERR_BadName, "Имя создаваемого объекта не должно быть пустым");
	}
//----------------------------------------------------------------------------[] 



//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Создаём объект
	OC_xxx oc_xxx;
	oc_xxx.New();
	identifier xxxID = oc_xxx.GetObjectID ();

// Прописываем значения в поля объекта
	oc_xxx.m_Name				=	arg.Name;

// Проводим коррекцию базы данных в связи с созданием объекта
//	...

// Запоминаем идентификатор
	arg.objID					=	xxxID;
//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]
#endif //}













#if 0  //{ Разблокировать функцию, когда она понадобится
//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` ПЕРЕЧИСЛЕНИЕ ДОСТУПНЫХ ОБЪЕКТОВ КЛАССА xxx											[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_xxx_Enumerate (MOD_xxx_Args& arg)
{
	DEBUG_STACK_NAME (MOD_xxx_Enumerate);
/*............................................................................[]
*///..........................................................................[]


//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
//----------------------------------------------------------------------------[] 



//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка аргументов	                                                      []                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Чтобы не запросили слишком много объектов
	arg.objFirstNo = max (arg.objFirstNo, 0);
	if (arg.objLastNo==INT_MAX) arg.objLastNo=arg.objFirstNo+MAX_XXX_ENUMERATE_NUM;
	if ((arg.objLastNo - arg.objFirstNo) > MAX_XXX_ENUMERATE_NUM)
	{
		ERR_RETURN_COMMENT_2 (ERR_TooManyEnumerate, "Запрошено %d объектов класса xxx, а максимально можно запросить %d", (arg.objLastNo - arg.objFirstNo), MAX_XXX_ENUMERATE_NUM);
	}
//----------------------------------------------------------------------------[] 



//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Получаем список всех объектов
	int							N,i,j;
	OC_xxx						oc_xxx;
	identifier_arr				ALL_XXX_IDs;
	oc_xxx.GetClassIdList	(ALL_XXX_IDs);

// Вычеркиваем те объекты, к которым нет доступа
	for (i=0; i<ALL_XXX_IDs.Size(); i++)
	{
		if (USER_CHECK_ACCESS_TO_XXX (loginID, ALL_XXX_IDs[i], "L")!=ERR_OK)
		{
			ALL_XXX_IDs [i] = NA;
		}
	}

// Проходимся по всем удовлетворяющим объектам и заполняем выходные аргументы
	for (N=0, j=0, i=0; i<ALL_XXX_IDs.Size(); i++) if (ALL_XXX_IDs[i]!=NA)
	{
		if (j<arg.objFirstNo || j>arg.objLastNo) {j++; continue;} else j++; N++;

		oc_xxx.Open (ALL_XXX_IDs[i]);
		arg.objIDs		+= ALL_XXX_IDs[i];
		arg.objNames	+=	oc_xxx.m_Name;
	//	...
	}

// Общее число объектов, которых можно перечислить
	arg.TotalStoredNum	=	N;
//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]
#endif //}













#if 0  //{ Разблокировать функцию, когда она понадобится
//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` ПОЛУЧЕНИЕ ДАННЫХ ОБЪЕКТА КЛАССА xxx													[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_xxx_GetData (MOD_xxx_Args& arg)
{
	DEBUG_STACK_NAME (MOD_xxx_GetData);
/*............................................................................[]
*///..........................................................................[]




//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Запрашиваемый объект должен существовать
	if (!OC_Exist (OBJ_CLASS_ID_xxx, arg.objID))
	{
		ERR_RETURN_COMMENT_1 (ERR_BadID, "Запрашиваемый объект xxx[%u] не существует", arg.objID);
	}
	OC_xxx oc_xxx (arg.objID);
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
// Проверяем право доступа
	res = USER_CHECK_ACCESS_TO_XXX (loginID, arg.objID, "R");
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Нет доступа [R] на получение данных");
	}
//----------------------------------------------------------------------------[] 



//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка аргументов	                                                      []                    
//                                                                            []
//----------------------------------------------------------------------------[] 



//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Заполняем аргументы полями объекта
	arg.Name	=	oc_xxx.m_Name;

// Имеет ли пользователь право редактировать объект.
	arg.ReadOnly	= ?;
//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]
#endif //}













#if 0  //{ Разблокировать функцию, когда она понадобится
//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` ИЗМЕНЕНИЕ ДАННЫХ ОБЪЕКТА КЛАССА xxx													[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_xxx_PutData (MOD_xxx_Args& arg)
{
	DEBUG_STACK_NAME (MOD_xxx_PutData);
/*............................................................................[]
*///..........................................................................[]




//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Запрашиваемый объект должен существовать
	if (!OC_Exist (OBJ_CLASS_ID_xxx, arg.objID))
	{
		ERR_RETURN_COMMENT_1 (ERR_BadID, "Запрашиваемый объект xxx[%u] не существует", arg.objID);
	}
	OC_xxx oc_xxx (arg.objID);
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
// Проверяем право доступа
	res = USER_CHECK_ACCESS_TO_XXX (loginID, arg.objID, "W");
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Нет доступа для выполнения операции");
	}
//	Проверяем уровень доступа
	if (oc_meta.m_AccessLevelThreshold <= oc_login.m_AccessLevel)
	{
		ERR_RETURN_COMMENT_2 (ERR_InsufficientAccessLevel, "Недостаточный уровень доступа (%d) для изменения объекта (%d)", int(oc_login.m_AccessLevel), int(oc_meta.m_AccessLevelThreshold));
	}
//----------------------------------------------------------------------------[] 




//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка аргументов	                                                      []                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Пользователь не может убрать зоны доступа, к которым не имеет атрибута доступа [D]
	int i,j;
	for (i=0; i<oc_meta.m_FeodGUID.Size(); i++)
	{
		guid gi = oc_meta.m_FeodGUID[i];
	//	Если зона не найдена в аргументах -- значит её выкинули, проверяем правомочность действия
		if (arg.FeodIDs.Find (gi.id)==-1)
		{
			if (USER_CHECK_ACCESS (loginID, gi.id, "D")!=ERR_OK)
			{
				string feodName;
				GetFeodName(gi.id, feodName);
				ERR_RETURN_COMMENT_2 (ERR_AccessDeny, "Пользователь не имеет права удалять объект из зоны доступа '%s'[%u]", feodName.c_str(), arg.FeodIDs[i]);
			}
		}
	}
// Пользователь не может назначить зоны доступа, к которым не имеет атрибута доступа [C]
	for (i=0; i<arg.FeodIDs.Size(); i++)
	{
		bool bFoundInRel = false;
	//	Ищем указанную зону в отношении
		for (j=0; j<oc_meta.m_FeodGUID.Size(); j++)
		{
			if (guid(oc_meta.m_FeodGUID[j]).id == arg.FeodIDs[i])
			{
				bFoundInRel = true;
				break;
			}
		}
	//	Если зона не найдена в отношении -- значит её добавили, проверяем правомочность действия
		if (!bFoundInRel && USER_CHECK_ACCESS (loginID, arg.FeodIDs[i], "C")!=ERR_OK)
		{
			string feodName;
			GetFeodName (arg.FeodIDs[i], feodName);
			ERR_RETURN_COMMENT_2 (ERR_AccessDeny, "Пользователь не имеет права вносить объект в зону доступа '%s'[%u]", feodName.c_str(), arg.FeodIDs[i]);
		}
	}
//----------------------------------------------------------------------------[] 




//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Изменяем поля объекта
	arg.Name	=	oc_xxx.m_Name;

// Проводим коррекцию базы данных в связи с изменениеями в объекте
//	...

//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]
#endif //}













#if 0  //{ Разблокировать функцию, когда она понадобится
//______________________________________________________________________________
//                                                                            []
//                                                                            []
//` УДАЛЕНИЕ ОБЪЕКТА КЛАССА xxx																[]
//                                                                            []
//____________________________________________________________________________[]
//
//
//
ERR_RESULT MOD_xxx_Delete (MOD_xxx_Args& arg)
{
	DEBUG_STACK_NAME (MOD_xxx_Delete);
/*............................................................................[]
*///..........................................................................[]




//----------------------------------------------------------------------------[] 
//                                                                            []
// Проверка доступа																				[]                    
//                                                                            []
//----------------------------------------------------------------------------[] 
// Запрашиваемый объект должен существовать
	if (!OC_Exist (OBJ_CLASS_ID_xxx, arg.objID))
	{
		ERR_RETURN_COMMENT_1 (ERR_BadID, "Запрашиваемый объект xxx[%u] не существует", arg.objID);
	}
	OC_xxx oc_xxx (arg.objID);
// Проверяем логин и пароль
	identifier loginID=NA;
	ERR_RESULT res = USER_CHECK_LOGIN_PASSWORD (arg.Login, arg.Password, loginID);
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Некорректный пароль или логин");
	}
// Проверяем право доступа
	res = USER_CHECK_ACCESS_TO_XXX (loginID, arg.objID, "D");
	if (res!=ERR_OK)
	{
		ERR_RETURN_COMMENT (res, "Нет доступа [D] для удаления объекта");
	}
//----------------------------------------------------------------------------[] 





//----------------------------------------------------------------------------[] 
//                                                                            []
// Выполнение запроса																			[]
//                                                                            []
//----------------------------------------------------------------------------[] 
// Проводим коррекцию базы данных в связи с уничтожением объекта
//	...

// Уничтожаем объект
	oc_xxx.Delete ();

//----------------------------------------------------------------------------[] 


	ERR_RETURN (ERR_OK);
}
//____________________________________________________________________________[]
#endif //}











/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[] END OF FILE                                                                []
[]                                                                            []
[]____________________________________________________________________________[]
*/