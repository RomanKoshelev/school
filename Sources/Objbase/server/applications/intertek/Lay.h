/*
	guid следует использовать тогда и только тогда, 
	когда невозможно использовать обратные ссылки для 
	контроля целостности связей объектов.
	Например, для межмодульных ссылок.
*/


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Реестр проекта, главный объект															[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
master class Registry
{
	bool		NeedInitiate	  = true;	// Система запущена в первый раз и её требуется проинициализировать.
	id			ConceptID_Sorted		[];	// Размер этого массива равен количеству существующих на данный момент концептов.

	int		ConceptNo_SortID		[];
	id			ConceptID_SortNo		[];	// Размер этого массива никогда не уменьшается и 
													// равен количеству создававшихся концептов за
													// все время жизни базы.
	int		ConceptParent_SortNo	[];	// Номера родительских концептов.
	int		ConceptType_SortNo	[];	// Тип концептов c соответствующими номерами.
	int		ConceptLevel_SortNo	[];	// Уровни концептов c соответствующими номерами.
}
//____________________________________________________________________________[]





/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Расширяемый объект																			[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
virtual class Extensible
{
// Динамическое расширение
	string		FIELD_Extension_Name		[];		// Названия динамически создаваемых полей
	string		FIELD_Extension_Value	[];		// Значения динамически создаваемых полей

// Модульное расширение
	guid			MOD_Base_GUID;							// Класс, идентификатор и уникальное значение объекта, являющегося базовым
	guid			MOD_Extension_GUID;					// Класс, идентификатор и уникальное значение объекта, являющегося расширением
}
//____________________________________________________________________________[]



















/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Модуль семантических связей																[]
[]                                                                            []
[]____________________________________________________________________________[]
//
*/
//----------------------------------------------------------------------------[] 
//` Отношение (тип связи)
class Relation
{
// Описание
	string	SysName;							// Системное уникальное имя, должно быть построено как переменная C++: "name_123_test"
	string	Name;								// Имя отношения
	string	Description;					// Описание отношения
	time		CreationTime=0;				// Время создания отношения

// Версия
	int		Version=0;						// Используестя чтобы избежать коллизий при одновременном редактировании отношения и связи.

// Поля
	string	FieldName			[];		// Названия полей
	string	FieldType			[];		// Типы полей ("object" "byte" "int" "bool" "time" "string" "float")
	string	FieldSysName		[];		// Системные названия полей, должны быть построены как переменная C++: "name_123_test"
	string	FieldDescription	[];		// Описания полей
	string	FieldInterfaceType[];		// Тип поля, интерпретируемый интерфейсом

// Права
	guid		OwnerGUID;						// Пользователь, создавший отношение (пока не используется)
	int		AccessLevelThreshold=0;		// Пороговое значение уровня доступа пользователей к объекту.
	guid		FeodGUID[];						// Зоны доступа, к которым принадлежит отношение

	index		[Name];
	index		[SysName];
}
//----------------------------------------------------------------------------[] 
//` Связь
class Linkage
{
	time		CreationTime=0;				// Время создания связи.
	id			RelationID=NA;					// Идентификатор отношения
	id			ProxyID[];						//	Список связанных объектов-прокси, используется если поле типа "object".
	string	Value[];							//	Значения, интерпретирруемые в зависимости от типа поля (кроме "object").

	guid		OwnerGUID;						// Пользователь, создавший связь (пока не используется)
	int		AccessLevelThreshold=0;		// Пороговое значение уровня доступа пользователей к объекту (не используется).

	index		[RelationID];
}
//----------------------------------------------------------------------------[] 
//` Промежуточный объект, хранящий все связи реального объекта
class LinkProxy
{
	time		CreationTime=0;				// Время создания объекта
	guid		RealObject;						//	Реальный	объект, участвующий в связях
	id			LinkageID		[];			// Список связей, в которых участвует объект
	id			RelationID		[];			// Типы связей (отношения), в которых участвует объект
	int		RelationField	[];			// Позиции в связях, занимаемые объектом
}
//----------------------------------------------------------------------------[] 
//` Объект, который может участвовать в связях
class Connectable
{
	guid		ProxyObject;					// Промежуточный объект, хрянящий список связей
}
//----------------------------------------------------------------------------[] 
//` Абстрактный метаобъект
class MetaObject: Connectable, Extensible
{
// Тип
	string		Type;

// Имя
	string		Name;
	string		SysName;

// Сортируемые поля
	string		Header1;
	string		Header2;
	string		Header3;
	string		Header4;
	string		Header5;

// Данные (другие данные можно хранить в полях класса-предка "Extensible")
	string		Comment;
	string		Text;
	int			arrInt		[];
	float			arrFloat		[];
	bool			arrBool		[];
	byte			arrByte		[];
	time			arrTime		[];
	string		arrString	[];
	guid			arrGUID		[];
	id				arrID			[];

// Права
	time			CreationTime=0;				// Время создания объекта
	guid			OwnerGUID;						// Пользователь, создавший объект (пока не используется)
	int			AccessLevelThreshold=0;		// Пороговое значение уровня доступа пользователей к объекту.
	guid			FeodGUID[];						// Зоны доступа, к которым принадлежит объект

// Индексы
	index			[Type, Name];
	index			[Type, SysName];
	index			[Type, Header1, Header2, Header3, Header4, Header5];
}
//____________________________________________________________________________[]













/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Модуль концептуального описания объектов												[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
class Concept: Extensible
{
	string		Name;									//	Название концепта.
	string		Description;						// Развёрнутое описание концепта.
	string		Type;									// Тип концепта.
	int			TypeNo					= -1;		// Номер типа концепта.
												
	id				Parent					= NA;		// ID родительского концепта.
					
	id				Ancestor						[];	// ID концептов-предков с уровнем>2.
	int			AncestorNo					[];	// Номера концептов-предков с уровнем>2.
	int			AncestorWeight				[];	// Веса концептов-предков = уровень-2.
					
	id				AllAncestor					[];	// ID концептов-предков (всех).
	id				AllAncestorNo				[];	// Номера концептов-предков (всех).
					
	id				Child							[];	// ID концептов, являющихся непосредственными детьми.
	int			ChildNo						[];	// Номера концептов-детей.
					
	id				Descendant					[];	//	Список концептов, для которых данный является предком.
	int			DescendantNo				[];	//	Список номеров концептов, для которых данный является предком.
					
	int			Level						= -1;		//	Уровень концепта в дереве.
					
	int			No							= -1;		// Порядковый номер концепта - используется для MOD_Concept_GetData.

// Индексы
	index		[Name];
	index		[Level];
	index		[No];
	index		[Type, Level];
	index		[TypeNo];
}
//____________________________________________________________________________[]






/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Модуль разграничения прав пользователей												[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
class User: Connectable, Extensible				// Пользователь
{
	string		Login;								//	Логин для входа в систему
	string		Password;							//	Пароль
	bool			PasswordInBrowser	= false;		// Использовать возможность автоматического ввода пароля
	time			CreationTime=0;					// Время создания объекта

// Анкета
	string		FullName;							// Полное имя
	string		Email;								// Адрес электронной почты
	string		URL;									// URL пользователя
	string		Data;									// Прочая информацияя, упакованная скриптами по 
															// известному им формату в текстовую строку.
// Права
	int			AccessLevel=0;						// Уровень доступа пользователя к объектам базы данных,
															// позволяет ранжировать пользователей, имеющих одинаковые права
															// и предотвращать конфликтные ситуации.
	id				GroupID	[];						// ID групп, к которым принадлежит пользователь [UserGroup].
	id				OwnFeodID[];						// Зоны доступа, созданные самим пользователем.  На эти феоды у него есть все атрибуты доступа.

// Индексы
	index			[Login];
	index			[FullName];
	index			[-CreationTime];
}
//----------------------------------------------------------------------------[] 
class UserGroup: Connectable, Extensible		// Группа прав пользователя
{															
	string		Name;									// Название группы.
	string		Type;									// Предопределённый тип группы: root, admin, user, прочее. Помогает строить интерфейс в административной зоне.
	string		Description;						// Описание группы.
	time			CreationTime=0;					// Время создания объекта
	guid			OwnerGUID;							// Пользователь, создавший объект (пока не используется)
	int			AccessLevelThreshold=0;			// Пороговое значение уровня доступа пользователей к объекту.
															
	id				UserID		[];					// Пользователи-члены группы.
															
	id				Rights_Feod	[];					// Зоны доступа. [концепты типа {Concept.Feod}]
	string		Rights_Attr	[];					// Атрибуты доступа к зонам -- строки символов: 
															// [C]reate [L]ist [R]ead [W]rite [D]elete [M]anipulate
// Индексы
	index			[Name];
	index			[Type];
	index			[CreationTime];
}
//____________________________________________________________________________[]

















/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Модуль полнотекстового поиска и индексирования с учётом морфологии			[]
[]                                                                            []
[]____________________________________________________________________________[]
//
*/
//______________________________________________________________________________
//                                                                            []
//` Поиск                                                                     []    
//                                                                            []
class Text // Тестовый объект 
{
	string	Name;
	string	Text;
	time		CreationTime=0;

	index		[Name];
}
//----------------------------------------------------------------------------[] 
class MorphologicRule
{
	byte		Attribute=0;						// Морфологический признак
	byte		BaseEnd_Available[];				// Правило применимо только если основа заканчивается на один из указанных символов.
	byte		BaseEnd_Exception[];				// Правило неприменимо если основа заканчивается на один из указанных символов.
	string	AffixNormal;						// Окончание в нормальной форме
	string	AffixVariant;						//	Возможное окончание
	string	Comment;								// Комментарий к правилу

	int		Number=0;							// Номер правила (номер строки в исходном тексте)

// Статистика
	int		MatchCount=0;						// Сколько раз правило подошло
	int		ApplyCount=0;						// Сколько раз правило было применено

// Для построения нормальной формы
	index		[AffixVariant];
// Для построения вариантов
	index		[Attribute, AffixNormal, AffixVariant];
}
//----------------------------------------------------------------------------[] 
class SearchItem
{
	string	NormalWord;							// Лемма, нормальная форма слова (типа: ед. число, муж. род, им. падеж.)
	string	NormalWordInv;						// Нормальная форма слова, записанная наоборот (абырвалг)
	string	Attributes;							// Морфологические признаки, если не указаны -- слово не имеет форм.
	bool		Hypothesis=false;					// Лемма построена эвристически.
	int		Text_Number				  = 0;	// Число проиндексированных текстов, содержащих слово, может использоваться для включения в стоп-лист.

// Информация для ранжирования резульаттов поиска
	guid		Text_ObjectSortedGUID	[];	// Упорядоченные идентификаторы индексируемых объектов
	time		Text_ModificationTime	[];	// Времена последних обновлений индексируемых объектов
	int		Text_WordAppearanceNum	[];	// Числа вхождений слова в индексируемые объекты
	int		Text_WordFirstPosition	[];	// Позиции первых вхождений слова в индексируемых объектах

	index		[NormalWord, Hypothesis];		// Для поиска основы
	index		[NormalWordInv];					// Для сравнения гипотез
}
//----------------------------------------------------------------------------[] 
class StopWord
{
	string Word;
	index  [Word];
}
//----------------------------------------------------------------------------[] 
class WordNibbleABC								// Распространённые трёхбуквенные сочетания
{
	string	Nibble;								// Трёхбуквенное сочетание
	int		Num				=0;				// Сколько раз кусочек встретился в обучающем тексте
	float		FreqPerMillion=0.0;				// Сколько раз встречается в тексте длиной миллион символов

	index		[Nibble];
	index		[FreqPerMillion];
}
//----------------------------------------------------------------------------[] 
virtual class UsageInFullTextIndex
{
	string	Name;
	string	Description;
	string	Text;
	string	Additional;
	id			SearchItemID[];					// Список всех слов, используемых объектом
}
//____________________________________________________________________________[]







/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]                                                                            []
[]				Ф А Й Л О В А Я   С И С Т Е М А   Д Л Я   И Н Т Е Р Н Е Т			[]
[]                                                                            []
[]`								Web-File System [WFS]										[]
[]                                                                            []
[]____________________________________________________________________________[]
*/




/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Папка																							[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
class WebFolder: Connectable, Extensible	// Расширение над феодами -- классом [Concept], ветвь {Concept.Feod.Files}
{
	id			WebFileSortedID[];			// Отсортированный список файлов папки [WebFile].

// Статистика
	int		ShowCount		= 0;				// Сколько раз были показаны объекты этого раздела.
	int		ClickCount		= 0;				// Сколько раз были просмотрены объекты этого раздела.
	float		CTR				= 0.0;			// ClickCount*100/ShowCount
	int		Estimation_Tot	= 0;				// Суммарная оценка
	int		Estimation_Num	= 0;				// Число голосов
	float		Estimation		= 0.0;			// Результирующая оценка

// Индексы
	index		[-ShowCount];
	index		[-ClickCount];
	index		[-CTR];
	index		[-Estimation];
}
//____________________________________________________________________________[]




/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Файл																								[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
class WebFile: Connectable, Extensible, UsageInFullTextIndex
{
// Паспорт
	string	Name_OSFile;				// имя, под которым файл дублируется на сервере, например, 435662.jpg
	string	Name_Upload;				// имя, под которым файл был загружен, например, ChiefFace.jpg
	string	MIMEType;					// MIME-тип, например: "image/jpeg", "object-link/InfoObject"
	string	IconType;					// Интерпретируемое скриптами значение, для отображения иконки.
												
// Права доступа и размещение
	id			WebFolderID[];				// Набор папок, к которым принадлежит файл [WebFolder]
	guid		OwnerGUID;					// Пользователь системы, создавший объект [User]
	int		AccessLevelThreshold=0;	// Пороговое значение уровня доступа пользователей к объекту.

// Даты, версии
	time		CreationTime=0;			// Время создания файла
	time		ModificationTime;			// Время последнего изменения
	time		LastAccessTime;			// Время последнего чтения
	int		Version=0;					// Число модификаций файла.
	
// Содержимое
	byte		BinaryData[];				// Бинарное содержимое файла.

// Статистика
	int		ShowCount		= 0;		// Сколько раз объект был показан (перечислен).
	int		ClickCount		= 0;		// Сколько раз объект был просмотрен.
	float		CTR				= 0.0;	// ClickCount*100/ShowCount
	int		Estimation_Tot	= 0;		// Суммарная оценка
	int		Estimation_Num	= 0;		// Число голосов
	float		Estimation		= 0.0;	// Результирующая оценка

// Индексы
	index		[Name];
	index		[OwnerGUID];
	index		[-CreationTime];
	index		[-ModificationTime];
	index		[-LastAccessTime];
	index		[-ShowCount];
	index		[-ClickCount];
	index		[-CTR];
	index		[-Estimation];
}
//____________________________________________________________________________[]





















/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]                                                                            []
[]`         С И С Т Е М А   П У Б Л И К А Ц И И   Д А Н Н Ы Х						[]
[]                                                                            []
[]                 Data Publishing System [DPS]                               []
[]                                                                            []
[]____________________________________________________________________________[]
*/






/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Профиль пользователя																		[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
class UserProfile: Connectable, Extensible		// Расширение над классом [User]
{																	
// Кому принадлежит профиль
	guid			UserGUID;								// Кому принадлежит профиль

// Desktop (персональный рабочий стол)					
	id				InfoDiv_Hide			[];			// Фильтр непоказываемых информационных разделов [InfoDiv]
	id				InfoDiv_Show			[];			// Фильтр показываемых информационных разделов [InfoDiv]
																	
	string		Filter_Name				[];			// Названия поисковых фильтров.
	string		Filter_SearchPhrase	[];			// Ключевые фразы для поисковых фильтров.
	id				Filter_FolderID		[];			// ID портфеля пользователя [Folder],
																// в которую нужно поместить отфильтрованные 
																// сообщения (или NA, если не помещать).
																	
// Просмотренные объекты:									
	id				SeenIO_ID				[];			// Идентификатор просмотренного объекта [InfoObject].
	time			SeenIO_Time				[];			// Время просмотра объекта.
	byte			SeenIO_Estimation		[];			// Оценка пользователем просмотренной информации
	int			SeenIO_ShowCount		=0;			// Сколько раз пользователю были показаны объекты.
	int			SeenIO_ClickCount		=0;			// Сколько раз пользователь прочитывал содержание объектов.
	float			SeenIO_CTR				=0.0;			// Заинтересованность пользователей = ClickCount*100/ShowCount.

																	
// Информационные объекты, созданные пользователем						
	id				OwnIO						[];			// Объекты, созданные пользователем [InfoObject]
	time			OwnIO_Time				[];			// Время действия
	int			OwnIO_ShowCount		=0;			// Сколько раз были показаны объекты, созданные пользователем.
	int			OwnIO_ClickCount		=0;			// Сколько раз были просмотрены объекты, созданные пользователем.
	float			OwnIO_CTR				=0.0;			// ClickCount*100/ShowCount
	int			OwnIO_Estimation_Tot	=0;			// Суммарная оценка другими пользователями объектов, созданных данным пользователем
	int			OwnIO_Estimation_Num	=0;			// Число оценок другими пользователями объектов, созданных данным пользователем
	float			OwnIO_Estimation		=0.0;			// Результирующая оценка другими пользователями объектов, созданных данным пользователем


// Лог работы пользователя в базе данных объектов
	guid			Log_ObjectGUID			[];			// Объект, над которым совершено действие
	int			Log_Action				[];			// Тип действия над объектом
	time			Log_Time					[];			// Время действия

// Счёт пользователя
	bool			Account_Enable			= false;
	float			Account_Debit			= 0.0;
	float			Account_Credit			= 0.0;
	int			Account_Log_Action	[];
	float			Account_Log_Amount	[];
	float			Account_Log_Debit		[];
	float			Account_Log_Credit	[];
	time			Account_Log_Time		[];
	string		Account_Log_Comment	[];


// "Корзина" пользователя:									
	guid			RootFolderGUID;						// Корневая папка с сохранёнными объектами [WebFolder]

// Индексы
	index			[-SeenIO_ShowCount];
	index			[-SeenIO_CTR];
	index			[-OwnIO_ShowCount];
	index			[-OwnIO_CTR];
	index			[-OwnIO_Estimation];
}
//____________________________________________________________________________[]










/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Раздел информации                                                         []
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
class InfoDiv: Connectable, Extensible	// Расширение над феодами -- классом [Concept], ветвь {Concept.Feod.Data}
{
	id			InfoSourceSortedID[];		// Рекомендуемые источники информации для раздела [InfoSource]
	id			InfoObjectSortedID[];		// Отсортированный список информационных объектов раздела [InfoObject].
	guid		ClipArtGUID;					// Папка файловой системы, содержащая картинки для этого раздела [WebFolder]. Папка вложена в {Concept.Feod.Files.Site.Public.Design.Images.Icons.Stubs}

// Статистика
	int		ShowCount			= 0;		// Сколько раз были показаны объекты этого раздела.
	int		ClickCount			= 0;		// Сколько раз были просмотрены объекты этого раздела.
	float		CTR					= 0.0;	// ClickCount*100/ShowCount
	int		Estimation_Tot		= 0;		// Суммарная оценка
	int		Estimation_Num		= 0;		// Число голосов
	float		Estimation			= 0.0;	// Результирующая оценка

// Индексы
	index		[-ShowCount];
	index		[-ClickCount];
	index		[-CTR];
	index		[-Estimation];
}
//____________________________________________________________________________[]




/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Информационный источник                                                   []                   
[]                                                                            []
[]____________________________________________________________________________*/
//
//
//
class InfoSource: Connectable, Extensible
{
	string	Name;								// Название источника
	string	Description;					// Описание источника
	string	URL;								//	Web-адрес, по которому находится источник информации.
	int		RefreshType;					// Интерпретируемый интерфейсом признак, показывающий когда и как источник обновляет содержание.
	id			InfoDivID [];					// Разделы, к которым относится источник.
	guid		LogoGUID;						// Файл, содержащая логотип [WebFile]. Файл должен лежать в директории {Concept.Feod.Files.Site.Public.Design.Images.Icons.Logos}
	guid		ColumnistGUID[];				//	Пользователи, за которыми закреплена обязанность обходить источник [User]
	string	Address;							//	Физический адрес источника (страна, город, телефон)
	string	Language;						//	Язык, на котором ведется информационный источник
	string	Type;								//	Тип информационного источника (печатные СМИ, информационное агентство, радио, ТВ, интернет-СМИ, пр. 
	string	State;							// Состояние -- правила доступа к материалам информационного источника (открытый доступ; ограниченный доступ; платный доступ; доступ закрыт и т.д.)

// Статистика
	int		ShowCount			= 0;		// Сколько раз были показаны объекты этого источника.
	int		ClickCount			= 0;		// Сколько раз были просмотрены объекты этого источника.
	float		CTR					= 0.0;	// ClickCount*100/ShowCount
	int		Estimation_Tot		= 0;		// Суммарная оценка
	int		Estimation_Num		= 0;		// Число голосов
	float		Estimation			= 0.0;	// Результирующая оценка

// Индексы
	index		[Name];
	index		[RefreshType];
	index		[-ShowCount];
	index		[-ClickCount];
	index		[-CTR];
	index		[-Estimation];
}
//____________________________________________________________________________[]




/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Информационный объект																		[]
[]                                                                            []
[]____________________________________________________________________________[]
*/
//
class InfoObject: UsageInFullTextIndex, Connectable, Extensible
{
// Паспорт
	string	SysName;							// Системное уникальное имя, может использоваться вместо ID, должно быть построено как переменная C++: "name_123_test"
	guid		OwnerGUID;						// Пользователь системы, создавший объект [User]
	int		AccessLevelThreshold=0;		// Пороговое значение уровня доступа пользователей к объекту.
	time		CreationTime=0;				// Время создания объекта.
	time		InfoTime=0;						// Время, приписанное к информационному объекту (по умолчанию=CreationTime).

// Разделы и права доступа
	id			InfoDivID [];					// Разделы, к которым относится объект [InfoDiv]. Доступ к объекту определяется феодами разделов.
	bool		UsageStrictAccess=true;		// Если true, то для изменения/удаления объекта необходимо иметь доступ ко всем феодам, иначе -- хотя бы к одному. 
													// Используется для предотвращения изменения объекта, лежащего в как в строго защищённом разделе, так и в слабозащищённом (например, в черновиках).

// Лог изменения состояний объекта (пишется соответствующими функциями базы данных)
	int		Log_Action	[];				// Тип действия над объектом.
	guid		Log_UserGUID[];				// Пользователь, совершивший действие
	time		Log_Time		[];				// Время действия
	string	Log_Comment	[];				// Комментарий к действию
													
// Содержание									
	guid		IconGUID;						// Картинка, выводимая вместе с текстом (обычно слева вверху).
	string	OriginalText;					// Оригинальная версия документа.
	guid		ArtworkGUID[];					// Список файлов-иллюстраций [WebFile]. Используется для подстановок вместо {{FIG.N}}. Файлы хранятся тут: {Concept.Feod.Files.Site.Public.Design.Images.Artworks}
	id			InfoSourceID=NA;				// Источник информации [InfoSource]
	id			AuthorID=NA;					// Автор как пользователь, если NA, то берётся из AuthorStr
	string	AuthorStr;						// Имя автора, не являющегося пользователем
	string	URL;								// Собственный адрес объекта
	string	RelatedLinks[];				// Ссылки по теме.
	id			CategoryID	[];				// Категории (напр. концепты-тематики) объекта. [Concept]

// Статистика
	int		ShowCount			= 0;		// Сколько раз объект был показан.
	int		ClickCount			= 0;		// Сколько раз объект был просмотрен.
	float		CTR					= 0.0;	// ClickCount*100/ShowCount
	int		Estimation_Tot		= 0;		// Суммарная оценка
	int		Estimation_Num		= 0;		// Число голосов
	float		Estimation			= 0.0;	// Результирующая оценка

// Индексы
	index		[Name];
	index		[OwnerGUID,		-InfoTime];
	index		[-InfoTime];
	index		[-CreationTime];
	index		[InfoSourceID, -InfoTime];
	index		[-ShowCount];
	index		[-ClickCount];
	index		[-CTR];
	index		[-Estimation];
}
//____________________________________________________________________________[]







/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` END OF FILE                                                               []           
[]                                                                            []
[]____________________________________________________________________________[]
*/
