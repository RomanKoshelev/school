/*
________________________________________________________________________________
[]                                                                            []
[] This is a part of the PROJECT: 'ObjBase'                                   []
[] Copyright (C) 1999 W:Brain Software Inc.                                   []
[] All rights reserved.                                                       []
[] __________________________________________________________________________ []
[]                                                                            []
[] Name:            object_lay.h                                              []
[] Date:            14.03.99                                                  []
[] Author:          Roman V. Koshelev                                         []
[] Description:     Описание типов базы объектов
[]____________________________________________________________________________[]
*/



/*
________________________________________________________________________________
                                                                              []

- - - - - - КЛАССЫ - - - - - - 
class ClassName {}
	Создается класс с именем ClassName (i=0...N-1), соответствующий
	контроллер имеет имя OC_ClassName.

class ClassName [N] {}
   Создается N классов с именами OC_ClassName_i (i=0...N-1)

class A: class B,C {}
	Класс А неследует все поля класса В и С. Индексы не наследуются. 
	Контроллер класса A не наследуется от контроллеров классов B и C.

master class A {}
	Объект мастер-класса автоматически создаётся в единственном экземпляре.
	К нему не применимы операци создания (.New()), 
	инициализации (=id; .Open(),...), объект мастер-класса не может 
	быть удалён и не может иметь индексов. Для инициализации контроллера
	мастер-класса достаточно просто объявить объект-контроллер:
	{
		OC_Main oc_main;
		oc_main.DoSomething();
	}
	Может быть полезен для запоминания идентификаторов других объектов. см. Test29.


- - - - - - ТИПЫ - - - - - - 

string
   Строка переменной длины вида {N, C0, C2, ..., CN-1, 0} где N -- длина строки.
   
id = object = identifier
   32-разрядный беззнаковый. unsigned long.
	Исполльзуется для хранения ссылок на другие объекты.

тип_поля имя []
   Одномерный массив переменной длины, хранящий элементы допустимых типов (кроме массивов).

string field;
	Поле имеет строковый тип.

int field;
	Поле имеет целочисленный 32-разрядный знаковый тип.

float field;
	Поле имеет реальный 32-разрядный знаковый тип.

byte field;
	Поле имеет целочисленный 8-разрядный беззнаковый тип (0-255).

time field;
	Поле имеет целочисленный 32-разрядный знаковый тип (по сути, тоже что и int).

bool field;
	Поле имеет булевский тип. Допустимые значения: true false.


- - - - - - ИНДЕКСЫ - - - - - - 

index [f1, f2, .. fn];
   Задаёт способ сортировки объектов по полям. Используется 
	сортировка "от меньшего к большему". Индексы не наследуются. 
	Максимальное число ключей в индексе (индексируемых полей) 
	определяется константой MAX_KEY_NUM_IN_INDEX ("ObjDriver.h")
	При создании контроллера, его текущим индексом автоматически
	становится первый из описанных индексов. Потом текущий индекс
	можно сменить.
index [f1, -f2, .. fn];
	По полю f2 используется метод сортировки "от большего к меньшему"



- - - - - - ЗАНЧЕНИЯ ПО УМОЛЧАНИЮ - - - - - - 

type field = value;
   Для каждого поля может быть определено значение по умолчанию,
   которое прописывается в него при создании нового объекта.
	Не применимо к массивам.

[]____________________________________________________________________________[]
*/

/*
class Test_SaveLoadIndex
{
	int i;
	index [i];
}
*/






/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Зритель                                                                   []       
[]                                                                            []
[]____________________________________________________________________________[]
*/
class Viewer
{
	string	Name;
	string	Email;
	string	UserAgent;

	bool		Anonymous			= true;	// Является ли этот объект разделяемым
													// между зрителями с одинаковым IP и 
													// неустановленным Cookie.

	int		TotalShows			= 0;		// Общее кол-во показов.
	int		TotalClicks			= 0;		// Общее кол-во кликов.

	string	IPAddress;						// IP адрес.
	string	Referrer;						// Referrer.
	id			IPAddressHash;					// CRC IP адреса.
	
	int		CRA_Site					[];	// Распределение (абсолютное) концептов сайтов, которые посещал зритель;
													// пересчитывается при каждом хите (сессии, хосте ??).
	int		CRN_Site					[];	// Распределение (нормированное) концептов сайтов, которые посещал зритель;
													// пересчитывается при каждом хите (пока, а там видно будет).
	int		CRN_Site_Update	= 0;		// Частота перерасчета CRN_Site ?
	int		CRA_Click				[];	// Распределение (абсолютное) концептов баннеров, на которые нажимал зритель.
	int		CRN_Click				[];	// Распределение (нормированное) концептов баннеров, на которые нажимал зритель.

	id			Group					= NA;		// Группа предпочтений зрителя.

	time		TZOffset				= 0;		// Смещение часового пояса зрителя в секундах.
	time		CreationTime		= 0;		// Время создания объекта.
	time		LastVisitTime		= 0;		// Время последнего посещения.
																
// Статистика по сайтам:
	id			Site						[];	// ID сайтов, посещённых зрителем.
	time		Site_LastHit			[];	// Время последнего посещения соответствующего сайта.
	int		Site_Hits				[];	// Счётчик хитов, сделанных на соответствующем сайте.
	time		Site_LastHost			[];	// Время последнего зачёта хоста на соответствующем сайте.
	int		Site_Hosts				[];	// Счётчик хостов, сделанных на соответствующем сайте.
	int		TotalHosts			= 0;		// Сумма по массиву TotalHosts (для апдейта VBN::ActiveViewers*)
	
	byte		Site_Votings			[];	// Число голосов, отданных зрителем за соответствующий сайт.
	byte		Site_VoteDayNo			[];	// Последние 2 цифры (т.е. остаток от деления на 100) номера дня (в году),
													// в который производилось соответствующее голосование (берётся из поля tm::tm_yday).
	int		CRA_Inquiry				[];	// Данные анкетирования зрителя, а также его концепты
	int		CRN_Inquiry				[];	// платформы/языка/броузера/....
	
	id			Site_SessionLastSiteID= NA;// Последний сайт, посещённый в эту сессию.


// Статистика по баннерам:
	id			Banner					[];	// ID баннеров, показанных зрителю.
	time		Banner_LastViewed		[];	// Время последнего показа соответствующего профиля баннера зрителю.
	int		Banner_ShowClick		[];	// Общее число показов соответствующего баннера зрителю.
	
	time		BannerClickTime		= 0;	// Время последнего клика на баннер.
	id			BannerClickID			= NA;	// ID последнего кликнутого баннера.
	id			BannerClickSiteID		= NA;	// ID сайта, рекламируемого кликнутым баннером.
	int		BannerClickHitCount	= 0;	// Счетчик хитов на рекламируемом сайте после клика.
	int		BannerClickSessionTime= 0;	// Продолжительность сессии на рекламируемом сайте после клика.

// Зарезервировано для будущего использования:
	id			TagID						= NA;		
	int		TagInt					= 0;
	bool		TagBool					= false;
	id			ReservedID				[];
	int		ReservedInt				[];
	string	ReservedString			[];
							
	index		[IPAddressHash, Anonymous];
}
//____________________________________________________________________________[]







class Test_Load
{
	int		Field;
	index		[Field];
}


class jerom_table
{
	int		OperatorID	= 0;
	time		MessageDate	= 0;
	string	Message;
}

class tsmc_table
{
	int		Int_Field	= 0;
	float		Float_Field = 0.0;
	string	Text_Field	= "abc";	// Это не совсем точно, т.к. mysql не поддерживает индексацию
											// для типа text, только для varchar, который может быть макс. 255 байт длиной.
/*index		[Int_Field]; -- не нужен, т.к. есть эквивалентный тройной индекс*/
	index		[Float_Field];
	index		[Text_Field];
	index		[Int_Field,Float_Field,Text_Field];
}


class Test_MM
{
	int		n;
	string	s;
	index		[n,s];
}
class Test_CRC
{
	id			CRC;
	string	STR;
	index		[CRC];
	index		[STR];
}

class Test_4G
{
	int		i;
	string	s;
	index  [i];
}

class Test_sort
{
   int		n1=0;
   int		n2;

   string 	s1;
   string 	s2;

   float		f1;
   float		f2;

   bool		b1;
   bool		b2;

	index 	[ n1];
	index 	[-n1];
	index 	[ s1];
	index 	[-s1];

	index 	[ n1, -f1];
	index 	[-f1,  f2];

	index 	[ s1,  s2];
	index 	[-s1,  s2];
	index 	[ s1, -s2];
	index 	[-s1, -s2];

	index 	[f1,  s1, n2];
	index 	[b1, -s1, n2];
}


/*
master class Master
{
   id    SlaveObjectID[];
}

class Slave:
{
   int   Number;
}

class MyObject:
{
   int   Number;
}

class Array
{
   int	i[];
}

class Test_int
{
   int	ival=0;
	index [ival];
}

class Test_int_float:
{
   int	ival = 0;
   float	fval = 3.14;

	index [ival];
	index [fval];
}


class Test0:
{
   bool		Flag		= false;
   string	Name		= "Test0";
   int		Number	= 0;
	byte		Age		= 0;

   id			References	[];
   string	Text			[];

	index		[Age];
	index		[Flag];
	index		[Name, Flag];
	index		[Number, Name, Flag, Age];
}




class Test1:
{
   bool		Flag		= true;
   string	Name		= "Test1";
   int		Number	= 3;
	byte		Age		= 3;

   id			References	[];
   string	Text			[];
}
*/

/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[] END OF FILE                                                                []
[]                                                                            []
[]____________________________________________________________________________[]
*/