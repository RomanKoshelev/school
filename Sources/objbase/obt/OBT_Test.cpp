/*
________________________________________________________________________________
[]                                                                            []
[] This is a part of the PROJECT: 'ObjBase'												[]
[] Copyright (C) 1999 W:Brain                                                 []
[] All rights reserved.                                                       []
[] __________________________________________________________________________ []
[]                                                                            []
[] Name:            OBT_Test.cpp																[]
[] Date:            13.04.99                                                  []
[] Author:          Roman V. Koshelev														[]
[] Description:     Различные тесты															[]
[]____________________________________________________________________________[]
*/

#include "ob.h"

/*______________________________________________________________________________
[]                                                                            []
[] В Н И М А Н И Е                                                            []
[]                                                                            []
[] При нагрузке в 10,000,000 обращений к базе данных в сутки						[]
[] система должна успевать отрабатывать 115 запросов в секунду.					[]
[] Из этого следует, что не надо устраивать такие запросы, которые				[]
[] будут обрабатываться дольше чем 0.01 секунды.										[]
[]                                                                            []
[]____________________________________________________________________________[]
[]                                                                            []
[]                                                                            []
[]` СПИСОК ВСЕХ ТЕСТОВ С КОММЕНТАРИЯМИ НАХОДИТСЯ ВНИЗУ ДАННОГО ФАЙЛА				[]
[]                                                                            []
[]____________________________________________________________________________[]
*/




static int i,j,k,t,f;


//______________________________________________________________________________
//                                                                            []
//` MakeRandomStr																					[]
//                                                                            []
const char * MakeRandomStr (const char *alfabet, size_t strLen, char* str=NULL, bool bZero=false)
{
	static const int	MAX_SSS_LEN = 10240;
	static char SSS	[MAX_SSS_LEN];
	
	if (str==NULL) {
		str = SSS;
		strLen = min (MAX_SSS_LEN-1, strLen);
	}
		 
	int N = strlen (alfabet);

	for (int i=0; i<(int)strLen; i++)
	{
		int r		= rand()%N;
		str[i]	= alfabet[r];
		str[i+1] = 0;
	}
	if (bZero)
	{
		str[rand()%strLen] = 0;
	}

	return str;
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` win2dos                                                                   []  
//                                                                            []
char win2dos (char ch)
{
	if((unsigned char)ch>=192 && (unsigned char)ch<=223)
		return (char)((unsigned char)ch-64);
	if((unsigned char)ch>=224 && (unsigned char)ch<=239)
		return (char)((unsigned char)ch-64);
	if((unsigned char)ch>=240 && (unsigned char)ch<=255)
		return (char)((unsigned char)ch-16);
	return ch;
}
char * win2dos (const char * pStr)
{
	static char SSS[1024+1];
	SSS[0]=0;
	for (int i=0; i<1024 && pStr[i]; i++){
		SSS[i  ] = win2dos(pStr[i]);
		SSS[i+1]	= 0;
	}
	return SSS;
}

//____________________________________________________________________________[]



//#include "OBT_Test_1_32.cpp"
//#include "OBT_Test_33_36.cpp"
//#include "OBT_Test_37.cpp"
#include "OBT_Test_50.cpp"
#include "OBT_Test_51.cpp"
void Test39 ();
void TestCache ();


//______________________________________________________________________________
//                                                                            []
//` RunTest																							[]
//                                                                            []
void RunTest (void)
{
	srand(time(0));
	printf ("\n\n___________________________________________________________________________\n\n\n");

//	Test1 ();	// Работа с мелкими файлами
//	Test2 ();	// Работа с разными файлами
//	Test3 ();	// Работа с крупными файлами
//	Test4 ();	// Работа с мелким кластером в boot-файле
//	Test5 ();	// Работа с мелким кластером в boot-файле -- проверка переменной длины
//	Test6 ();	// Работа с мелким кластером в boot-файле -- random
//	Test7 ();	// Проверка нового формата  файлов

//	Test8 ();	// Проверка замораживания возможность перехода на нижний уровень

//	Test9 ();	// Работа с файлами разного размера random запись
//	Test10 ();	// Работа с большим числом файлов и проверка памяти
//	Test11 ();	// Работа с файлами разного размера random создание и считывание
//	Test12 ();	// Работа с созданными файлами разного размера считывание
//	Test13 ();	// Работа с многими файлами одного размера
//	Test14 ();	// Создание и запись 100,000,0000 объектов по N байт
//	Test15 ();	// Создание файла; чтение и запись блоков с изменением размера
//	Test16 ();	// CFile

//______________________________________________________________________________
//                                                                            []
//` Тесты с объектами																			[]
//                                                                            []
//	Test17 ();	// Проверка работы объектов по ID
//	Test18 ();	// Проверка AddRef & Release
//	Test19 ();	// Проверка работы объектов по индексам
//	Test20 ();	// Проверка шаблона CObject
//	Test21 ();	// Проверка записи/считывания индексов и удаления объектов
//	Test22 ();	// Проверка записи/считывания объектов <<
//	Test23 ();	// Проверка функции GetClassIdList
//	Test24 ();	// Проверка индексации float и int
//	Test25 ();	// Проверка утечки памяти и скорости работы <<
//	Test26 ();	// Проверка новых ключей
//	Test27 ();	// Проверка скорости работы и оптимального удаления объектов
//	Test28 ();	// Проверка оператора копирования данных
//	Test29 ();	// Проверка мастер-класса
//	Test30 ();	// Проверка статических функций OC_Exist
//	Test31 ();	// Проверка работы событий
//	Test32 ();	// Проверка CPtr::Sort


//	Test33 ();	// Проверка обратной сортировки
//	Test34 ();	// Проверка полей-массивов
//	Test35 ();	// Проверка быстрой загрузки/сохранения индексов
//	Test36 ();	// Проверка string::delete
//	Test37 ();	// Проверка HTTP_URL
//	Test38 ();	// Проверка USER_AGENT
//	Test39 ();	// MemoryManager
//	Test40 ();	// string::GetCRC()
//	TestCache ();	// Кеш для результата функции
//	Test41 ();	// Компилятор концептов

	Test50 ();	// Сравнение с MySQL
//	Test51 ();	// Скорость загрузки зрителей

	printf ("\n\n___________________________________________________________________________\n\n\n");
//	theFileDriver.PrintMemoryReport ();
}
//____________________________________________________________________________[]



/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[] END OF FILE                                                                []
[]                                                                            []
[]____________________________________________________________________________[]
*/
