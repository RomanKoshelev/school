/*
________________________________________________________________________________
[]                                                                            []
[] This is a part of the PROJECT: BX														[]
[] __________________________________________________________________________ []
[]                                                                            []
[] Name:            Lay.h																		[]
[] Date:            12.07.99                                                  []
[] Author:          Alex Vershinin															[]
[] Description:     Формат объектов базы данных.										[]
[]	Last Modified:	  NA.																			[]
[]____________________________________________________________________________[]
*/


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Зритель                                                                   []       
[]                                                                            []
[]____________________________________________________________________________[]
*/
class Viewer
{
	id			Reference			= NA;		// ID объекта-ссылки (для разделяемых) - класс ViewerReference.
	string	Name;
	string	Email;
	string	UserAgent;

	bool		Anonymous			= true;	// Является ли этот объект разделяемым
													// между зрителями с одинаковым IP и 
													// неустановленным Cookie.

	int		TotalShows			= 0;		// Общее кол-во показов.
	int		TotalClicks			= 0;		// Общее кол-во кликов.

	string	IPAddress;						// IP адрес.
	string	Referrer;						// Referrer.
	id			IPAddressHash;					// CRC IP адреса.
	
	int		CRA_Site					[];	// Распределение (абсолютное) концептов сайтов, которые посещал зритель;
													// пересчитывается при каждом хите (сессии, хосте ??).
	int		CRN_Site					[];	// Распределение (нормированное) концептов сайтов, которые посещал зритель;
													// пересчитывается при каждом хите (пока, а там видно будет).
	int		CRN_Site_Update	= 0;		// Частота перерасчета CRN_Site ?
	int		CRA_Click				[];	// Распределение (абсолютное) концептов баннеров, на которые нажимал зритель.
	int		CRN_Click				[];	// Распределение (нормированное) концептов баннеров, на которые нажимал зритель.

	id			Group					= NA;		// Группа предпочтений зрителя.

	time		TZOffset				= 0;		// Смещение часового пояса зрителя в секундах.
	time		CreationTime		= 0;		// Время создания объекта.
	time		LastVisitTime		= 0;		// Время последнего посещения.
																
// Статистика по сайтам:
	id			Site						[];	// ID сайтов, посещённых зрителем.
	time		Site_LastHit			[];	// Время последнего посещения соответствующего сайта.
	int		Site_Hits				[];	// Счётчик хитов, сделанных на соответствующем сайте (для Site::ActiveViewersID).
	time		Site_LastHost			[];	// Время последнего зачёта хоста на соответствующем сайте.
	int		Site_Hosts				[];	// Счётчик хостов, сделанных на соответствующем сайте.
	int		TotalHosts			= 0;		// Сумма по массиву TotalHosts (для апдейта VBN::ActiveViewers*)
	
	byte		Site_Votings			[];	// Число голосов, отданных зрителем за соответствующий сайт.
	byte		Site_VoteDayNo			[];	// Последние 2 цифры (т.е. остаток от деления на 100) номера дня (в году),
													// в который производилось соответствующее голосование (берётся из поля tm::tm_yday).
	int		CRA_Inquiry				[];	// Данные анкетирования зрителя, а также его концепты
	int		CRN_Inquiry				[];	// платформы/языка/броузера/....
	
	id			Site_SessionLastSiteID= NA;// Последний сайт, посещённый в эту сессию.

// Статистика по баннерам:
	id			Banner					[];	// ID баннеров, показанных зрителю.
	time		Banner_LastViewed		[];	// Время последнего показа соответствующего профиля баннера зрителю.
	int		Banner_ShowClick		[];	// Общее число показов соответствующего баннера зрителю.
	
	time		BannerClickTime		= 0;	// Время последнего клика на баннер.
	id			BannerClickID			= NA;	// ID последнего кликнутого баннера.
	id			BannerClickSiteID		= NA;	// ID сайта, рекламируемого кликнутым баннером.
	int		BannerClickHitCount	= 0;	// Счетчик хитов на рекламируемом сайте после клика.
	int		BannerClickSessionTime= 0;	// Продолжительность сессии на рекламируемом сайте после клика.

// Для кеширования:
	float		ReloadNum				= 0.0;// Число релоадов (возвратов за время, меньшее Registry::ReloadTimeThreshold).
	float		AveReloadTime			= 0.0;// Средняя продолжительность релоада. (=ReturnTime/Viewer::ReloadNum)

// Зарезервировано для будущего использования:
	id			TagID						= NA;		
	int		TagInt					= 0;
	bool		TagBool					= false;
	id			ReservedID				[];
	int		ReservedInt				[];
	string	ReservedString			[];
							
//	index		[IPAddressHash, Anonymous];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Группа зрителей                                                           []               
[]                                                                            []
[]____________________________________________________________________________[]
*/

class ViewerGroup
{
	int		ConceptStats			[];

	id			Viewer					[];

// Зарезервировано для будущего использования:
	id			TagID					= NA;		
	int		TagInt				= 0;
	bool		TagBool				= false;
	id			ReservedID				[];
	int		ReservedInt				[];
	string	ReservedString			[];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]



/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Пользователь                                                              []            
[]                                                                            []
[]____________________________________________________________________________[]
*/
class User				
{
// Общее

	string	Login;							// Имя для входа в сеть.
	string	Password;						// Пароль для входа в сеть.
	bool		ForgetPassword		= false;	// Переспросить ли у пользователя пароль.
	string	FullName;						// Полное имя пользователя.
	id			InterfaceLanguage	= NA;		// ID препочтительного языка интерфейса.
	bool		InterfaceType		= false;	// Интерфейс пользователя (быстрый/точный).
	time		CreationTime		= 0;		// Время создания объекта.
	byte		VBN					= 255;	// Идентификатор виртуальной сети.
	byte		ba_Concept				[];	// Концепты пользователя.
	byte	  eba_Concept				[];	// Концепты пользователя.

// Координаты

   string	Email;							// Email.
   string	Phone;							// Телефон.
   string	Fax;								// Fax.
   string	Address;							// Адрес.
   string	URL;								// URL-Адрес.
   string	Comment;							// Комментарий.
	time		TZOffset				= 0;		// Смещение часового пояса в секундах.

// Оповещение

   int		NotifyFreq			= 0;		// Как часто присылать статистику (не надо/каждый день/неделю/месяц).
   bool		NotifyHTML			= false;	// Присылать ли статистику в виде HTML.
   int		NotifyDepth			= 0;		// Тип присылаемой статистики (её развёрнутость, глубина).

// Объекты

   id			Site						[];	// Список сайтов пользователя.
   id			SiteProfile				[];	// Список профилей сайта, созданных пользователем.
   id			Banner					[];	// Список баннеров пользователя.
   id			BannerProfile			[];	// Список профилей баннера, созданных пользователем.


// Статистика

	float		ShowsLeft			= 10;		//	Общее число оставшихся показов.
	float		ClicksLeft			= 10;		//	Общее число оставшихся кликов.

	id			TradeStats			= NA;		// ID объекта класса TradeStats для данного пользователя.
	
// Пометки (для) модератора:
	bool		Allowed				= false;	// Информация пользователя разрешена модератором.
	byte		ObjectState			= 1;		// Состояние объекта: 0 - проверен; 1 - новый;
													//  2 - изменено критическое поле; 3 - изменён.
	byte		ba_ModeratorComment	[];	// Битовое поле комментариев модератора.

// Зарезервировано для будущего использования:
	id			TagID					= NA;
	int		TagInt				= 0;
	bool		TagBool				= false;
	id			ReservedID				[];
	int		ReservedInt				[];
	string	ReservedString			[];

// Индексы:
	index		[VBN, Allowed, ObjectState];	// Индекс для поддержки модератора.
	index		[VBN, Login];						// Индекс для идентификации пользователя.

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]



/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Информация о продаже/покупке показов/кликов у пользователя                []                                                          
[]                                                                            []
[]____________________________________________________________________________[]
*/

class TradeStats
{
	time		SoldShowDates			[];	// Проданные показы - когда
	int		SoldShowAmounts		[];	// Проданные показы - сколько	
	string	SoldShowBuyer			[];	// Проданные показы - кому

	time		BoughtShowDates		[];	// Купленные показы - когда
	int		BoughtShowAmounts		[];	// Купленные показы - сколько	
	string	BoughtShowSeller		[];	// Купленные показы - у кого
	
	time		SoldClickDates			[];	// Проданные показы - когда
	int		SoldClickAmounts		[];	// Проданные показы - сколько	
	string	SoldClickBuyer			[];	// Проданные показы - кому

	time		BoughtClickDates		[];	// Купленные показы - когда
	int		BoughtClickAmounts	[];	// Купленные показы - сколько	
	string	BoughtClickSeller		[];	// Купленные показы - у кого

// Зарезервировано для будущего использования:
	id			TagID					= NA;		
	int		TagInt				= 0;
	bool		TagBool				= false;
	id			ReservedID				[];
	int		ReservedInt				[];
	string	ReservedString			[];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]



/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Баннер                                                                    []      
[]                                                                            []
[]____________________________________________________________________________[]
*/

class Banner
{
	id			OwnerID					= NA;		// ID владельца баннера.
	string	FileName;							// Имя баннера, с котором происходил upload.
	int		FileSize					= 0;
	int		UploadNo					= 0;
	time		CreationTime			= 0;		// Время создания баннера.
	byte		VBN						= 255;	// Номер виртуальной сети.
										
	string	Description;						// Описание баннера (например, для текстовых баннеров).
	bool		State						= true;	// Состояние баннера (выкл/вкл).

//----------------------------------------------------------------------------[] 

	id			Profile					= NA;		// ID объекта класса BannerProfile с профилем баннера.
	id			SiteAnnounce				[];	// Сайты, на анонсы которых подписан баннер.

// Собственные параметры баннеров					
	byte		ba_Concept					[];	// Концепты, имеющие отношение к баннеру.
	byte		eba_Concept					[];	// 
											
// Статистика							
											
	int		TotalShows				= 0;		// Количество показов баннера.
	int		TotalClicks				= 0;		// Количество нажатий на баннер.
											
// Пометки (для) модератора:		
	bool		Allowed					= false;	// Информация пользователя разрешена модератором.
	byte		ObjectState				= 1;		// Состояние объекта: 0 - проверен; 1 - новый;
														//  2 - изменено критическое поле; 3 - изменён.
	byte		ba_ModeratorComment		[];	// Битовое поле комментариев модератора.

// Зарезервировано для будущего использования:
	id			TagID						= NA;		
	int		TagInt					= 0;
	bool		TagBool					= false;
	id			ReservedID					[];
	int		ReservedInt					[];
	string	ReservedString				[];

// Индексы:
	index		[VBN, Allowed, ObjectState];
	

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Профиль баннера                                                           []                 
[]                                                                            []
[]____________________________________________________________________________[]
*/
class BannerProfile
{
	string	Name;									// Название профиля.
	byte		VBN						= 255;	// Номер виртульной сети.
	time		LastModified			= 0;		// Время последней модификации профиля.
	id			OwnerID					= NA;		// Идентификатор пользователя-владельца.
	id			HREF						= NA;		// ID сайта, на который надо перейти при нажатии на баннер.
	bool		Commercial				= false;	// Являются ли баннеры профиля коммерческими.
	int		BannerType				= 0;		// Тип баннера.
	id			SiteAnnounce				[];	// Сайты, на анонсы которых подписаны баннеры профиля.
										
// Собственные параметры:		
	id			Banner						[];	// Список баннеров, пользующихся данным профилем.
	byte		 ba_Concept					[];	// Концепты профиля.
	byte		eba_Concept					[];

	
	bool		State						= false;	// Состояние (вкл/выкл).
	string	AltText;								// Альтернативный текст.
	
// Требования к сайтам:
	byte		 ba_SiteConceptInclude	[];	// Концепты сайтов, на которых показывать баннер.
	byte		 ba_SiteConceptExclude	[];	// Концепты сайтов, на которых НЕ показывать баннер.
	byte		eba_SiteConcept			[];

	id			SiteInclude					[];	// Разрешённые сайты.
	id			SiteExclude					[];	// Запрещённые сайты.

// Требования к зрителям:
	string	ViewerIPEnable				[];	// Разрешённые IP зрителей.
	string	ViewerIPDisable			[];	// Запрещённые IP зрителей.

	byte		 ba_ViewerConceptInclude[];	// Концепты зрителей, которым показывать баннер.
	byte		 ba_ViewerConceptExclude[];	// Концепты зрителей, которым НЕ показывать баннер.
	byte		eba_ViewerConcept			[];

// Требования ко времени показа:
	bool		UseLocalTime			= true;	// Применять ли расписание к локальному времени зрителя.
	time		ScheduleTZOffset		= 0;		// Часовой пояс расписания (если UseLocalTime==false).
	bool		ShowIfLocalUnknown	= true;	// Показывать ли баннер, если локальное время неизвестно
														// (показывается с использованием ScheduleTZOffset).
	byte		ba_Schedule					[];	// Расписание - по биту на каждый час недели.
											
	time		AutoOn					= 0;		// Показывать в промежутке времени от ...
	time		AutoOff								// до ...
											= 2147483647;
// Частота показа зрителю:			
	int		RepeatCount				= -1;		// Сколько раз показывать одному и тому же зрителю.
	time		RepeatTime				=	0;		// Показывать баннеры одному и тому же зрителю не чаще чем ...
																
// Статистика
	id			SiteTarget_SiteID			[];	// Идентификаторы сайтов, на которых были показаны баннеры профиля.
	int		SiteTarget_ShowRate		[];	// Распределение показов баннеров профиля на разных сайтах.
	int		SiteTarget_ClickRate		[];	// Распределение кликов баннеров профиля на разных сайтах.
	int		SiteTarget_ViewRate		[];	// Распределение просмотров баннеров профиля на разных сайтах.

	int		ViewerConceptRate			[];	// Распределение концептов зрителей, реагирующих на баннеры профиля.
														// Обновляется на основе распределения концептов зрителей, 
														// кликнувших или просмотревших баннеры профиля.
	int		ShowNumRate					[];	// Распределение количества зрителей, увидивших
														// баннеры профиля N раз (см Registry::ClickNumRateSize).
	int		ClickNumRate				[];	// Распределение количества зрителей, кликнувших
														// баннеры профиля N раз (см Registry::ShowNumRateSize).
	int		HitNumRate					[];	// Распределение количества зрителей по количеству сделанных ими
														// хитов после клика баннеров профиля. Т.е. каждый i-тый элемент этого 
														// массива хранит количество зрителей, сделавших i хитов на сайтах,
														// рекламируемых баннерами профиля. Это круче, чем простой CTR !
														// (см Registry::HitNumRateSize, Viewer::).
	int		SessionTimeRate			[];	// Распределение количества зрителей по продолжительности сделанных ими
														// сессий после клика баннеров профиля. Т.е. каждый i-тый элемент этого 
														// массива хранит количество зрителей, с длительностью сессии, равной i минут,
														// сделанной на сайтах, рекламируемых баннерами профиля. Это круче, чем простой CTR !
														// (см Registry::SessionTimeRateSize, Viewer::).


//- - - - - - - - - - - - - - - - - - - - - - - - - -

	bool		CountTypeByShows		= true;	// Тип счета: на показы или на клики. В последнем случае
														// устанавливается MaxDailyShows = MaxDailyClicks * CTR.
	int		MaxDailyClicks			= 0;		// Максимальное число кликов в день.
	int		MaxDailyShows			= 0;		// Максимальное число показов в день.
	time		MaxDailyShowsChangeTime=0;		//	Время последнего изменения MaxDailyShows. 

	int		TotalShows				= 0;		// Количество показов баннера этого профиля.
	int		TotalClicks				= 0;		// Количество нажатий на баннеры этого профиля.
																
	int		SessionEvents			= 0;		// Число событий ShowEvent с момента 
														// последнего изменения MaxDailyShows.
																	
	float		Priority					= 1;		//	Приоритет.
														// Чем он меньше, тем больше надо показывать баннер.

// Пометки (для) модератора:
	bool		Allowed					= true;	// Доступен/не доступен для показа.
	byte		ObjectState				= 1;		// Состояние объекта: 0 - проверен; 1 - новый;
														//  2 - изменено критическое поле; 3 - изменён.
	byte		ba_ModeratorComment	[];		// Битовое поле комментариев модератора.

// Зарезервировано для будущего использования:
	id			TagID						= NA;		
	int		TagInt					= 0;
	bool		TagBool					= false;
	id			ReservedID					[];
	int		ReservedInt					[];
	string	ReservedString				[];

// Индексы:

	index		[VBN, Allowed,	ObjectState];// Индекс для поддержки модератора.
	index		[VBN,	State,	Allowed,	BannerType, Priority];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]



/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Страница                                                                  []        
[]                                                                            []
[]____________________________________________________________________________[]
*/
class Page
{
	id			Site					= NA;
	int		No						= -1;		// Номер страницы.
	string	URL ;								// URL этой страницы.
	byte		ba_Concept				[];	// Концепты, имеющие отношение к странице.
	byte		eba_Concept				[];
	byte		pba_Concept				[];

	int		CounterType			= 0;		// Тип счетчика для этой страницы.

//----------------------------------------------------------------------------[]
	bool		ConceptSet			= false;	// Установил ли пользователь ba_Concept.
	id			TimeStats				[];	// ID счётчиков для страницы.
	byte		TimeStatsType			[];	// Тип соответствующего счётчика из TimeStats.


//----------------------------------------------------------------------------[]
	int		CRA_Visitor				[];	// Абсолютное распределение концептов посетителей страницы;
													// пересчитывается при хите.
	int		CRN_Visitor				[];	// Нормализованное распределение концептов посетителей страницы;
													// пересчитывается при хите (пока, а потом - при хосте).
	int		CRN_Visitor_Update	=0;	// Частота обновления CRN_Visitor.

	int		CRN_VisitorIncr		[];	// Нормированная разница CRN_Visitor и средней аудитории интернета,
													// плюс CRN_Self;
													// пересчитывается либо при изменении ba_Concept
													// либо в зависимости от CRN_VisitorIncr_Update.
	int		CRN_VisitorIncr_Update=0;	// Частота обновления CRN_VisitorIncr.

//----------------------------------------------------------------------------[]
	id			Referrer					[];	// Адреса страниц, с которых пришли на данную.
	int		ReferrerCount			[];	// Счётчики страниц, с которых пришли на данную.

//----------------------------------------------------------------------------[]
// Зарезервировано для будущего использования:
	id			TagID						= NA;		
	int		TagInt					= 0;
	bool		TagBool					= false;
	id			ReservedID				[];
	int		ReservedInt				[];
	string	ReservedString			[];


	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Сайт                                                                      []    
[]                                                                            []
[]____________________________________________________________________________[]
*/
class Site
{
	id			OwnerID				= NA;		// ID пользователя-владельца сайта.	
	byte		VBN					= 255;	// Идентификатор виртуальной сети.
	time		CreationTime		= 0;		// Время создания объекта.
	
	string	Alias;							// Синоним ID сайта.
	string	Name;								// Название сайта.
	string	Description;					// Описание (для категоризатора).
	string	Announce					[];	// Анонсы сайта.
	string	URL;								// URL сайта.
	
	int		CounterType			= 0;		// Тип счётчика для этого сайта.
//----------------------------------------------------------------------------[]
// Пароли и доступ к статистике:
	bool		RateMySite			= true;	// Участвует ли этот сайт в рейтинге посещаемости.
	string	RateStatsViewPassword;		// Пароль на доступ к статистике посещаемости для этого сайта.

	bool		ShowAudience		= true;	// Разрешено ли участвовать в подсчётах пересечений аудиторий.
	time		ShowAudienceOffTime	= 0;	// Время последнего запрещения ShowAudience.
																
//----------------------------------------------------------------------------[]
// Профиль сайта:					
	id			Profile				= NA;							
	
	id			Keyword					[];	// Ключевые слова этого сайта (class Keyword).

	string	MirrorInclude			[];	// Список зеркал сайта.
	string	MirrorExclude			[];	// Список игнорируемых зеркал сайта.
	string	MirrorSubstr			[];	// Список слов, которые игнорируются в HTTP_REFERER при проверке зеркал.

	string	IgnoredIP				[];	// Список IP-адресов, хиты с которых не засчитываются (даже как подозрительные).
	id			IgnoredViewerID		[];	// Список ID зрителей, хиты с которых не засчитываются (даже как подозрительные).
	
//----------------------------------------------------------------------------[]
// Концепты сайта:
	byte		 ba_Concept				[];	// Концепты сайта, указанные владельцем.
	byte		pba_Concept				[];	// Расширенные (с родителями) концепты сайта.
	byte		eba_Concept				[];	// Расширенные (с детьми) концепты сайта.
	int		CRN_Self					[];	// Нормированное распределение концептов сайта
													// вместе с нужными предками и весами. 
													// Пересчитывается при изменении ba_Concept.

//----------------------------------------------------------------------------[]
// Страницы сайта:
	id			Page						[];	// Список страниц сайта 
	string	PageName					[];	// Названия страниц сайта.
	int		PageNo					[];	// Массив номеров страниц.
//----------------------------------------------------------------------------[]
	id			AdBannerProfile		[];	// Список ID профилей баннеров, рекламирующих этот сайт.

	id			SuspiciousInfo		= NA;		// ID (class SuspiciousInfo) объекта со статистикой подозрительных событий.

//----------------------------------------------------------------------------[]
// Статистика по посетителям:
	int		CRA_Visitor				[];	// Абсолютное распределение концептов посетителей сайта;
													// пересчитывается при хите.
	int		CRN_Visitor				[];	// Нормализованное распределение концептов посетителей сайта;
													// пересчитывается при хите (пока, а потом - при хосте).
	int		CRN_Visitor_Update	=0;	// Частота обновления CRN_Visitor.

	int		CRA_Inquiry				[];	// Ответы на анкету зрителей сайта.
	int		CRN_Inquiry				[];	// Ответы на анкету зрителей сайта.

	int		CRN_VisitorIncr		[];	// Нормированная разница CRN_Visitor и средней аудитории интернета,
													// плюс CRN_Self;
													// пересчитывается либо при изменении ba_Concept
													// либо в зависимости от CRN_VisitorIncr_Update.
	int		CRN_VisitorIncr_Update=0;	// Частота обновления CRN_VisitorIncr.

//----------------------------------------------------------------------------[]
// Аудитория
	id			Audience_SiteID		[];	// ID сайтов, на которых побывали посетители данного сайта (конкурентов).
	int		Audience_Viewers		[];	// Число посетителей сайта, побывавших на сайте соответствующего конкурента.
	int		Audience_Hosts			[];	// Кол-во хостов, которые посетители сайта сделали на сайте соответствующего конкурента.

	int		Audience_SiteIDInclude[];	// ID сайтов, которые пользователь хотел бы оставить в Audience_SiteID.

//----------------------------------------------------------------------------[]
// Активные зрители
	id			ActiveViewersID		[];	// Двадцатка самых активных (по хитам) зрителей
													// размера Registry::ActiveViewersSize.
	int		ActiveViewersHits		[];	// Соответствующее число хитов.
//----------------------------------------------------------------------------[]
// Рефереры, посетители
	int		RecentPointer			= 0;	// Указатель на свободный элемент в массивах RecentVisitor и RecentReferrers.
	id			RecentVisitor			[];	// Registry::VisitorHistoryLength последних посетителей.
	id			RecentReferrer			[];	// Registry::VisitorHistoryLength последних рефереров.
	time		RecentTimeStamp		[];	// Время захода соответствующего зрителя.

	id			Referrer					[];	// Адреса страниц, с которых пришли на данную.
	int		ReferrerCount			[];	// Счётчики страниц, с которых пришли на данную.
	time		Referrer_LastReset	= 0;	// Время последнего сброса счётчика ReferrerCount.

	id			DailyReferrerStats	[];	// ID объекта класса DailyReferrerStats
													// c информацией по реферерам за 
													// Registry::DailyReferrerSize последних cуток.
	time		DailyReferrerTimeStamp[];	// Соответствующие моменты времени.
//----------------------------------------------------------------------------[]
// Поисковые слова
	id			SearchWordsInfo		= NA; // ID объекта класса SearchWordsInfo.

//----------------------------------------------------------------------------[]
// Анкета
	int		Inquire					[];	// Статистика по анкетированию посетителей сайта.
	int		InquiredVisitorNum	= 0;	// Число прошедших анкетирование зрителей.					

//----------------------------------------------------------------------------[]
// Сессии
//	int		SessionNum				= 0;	//	Общее количество сессий с этим сайтом.
//	int		SessionTotalTime		= 0;	//	Общее время между перезагрузками.
	time		SessionResetTime		= 0;	// Время последнего сброса сессионных счетчиков.

//----------------------------------------------------------------------------[]
// Распределения по количеству
	int		ReturnNumRate			[];	// Распределение возвратов (хостов) по их количеству.
													// ReturnRate[0] человек заходило по 1 разу
													// ReturnRate[1] человек заходило по 2 раза ...
													// ReturnRate[Registry::ReturnNumRateSize-1] человек
													// заходило Registry::ReturnNumRateSize раз и более.

	int		ShowNumRate				[];	// Распределение показов баннеров по их количеству.

//----------------------------------------------------------------------------[]
//	int		VisitorsOnline			= 0;	// Cм. OnlineVisitors
	time		LastVisitTime			= 0;	// Время последнего посещения.
	time		LastUpdateTime			= 0;	// Время последнего обновления функцией BX_Site_UpdateLastCounters().

//----------------------------------------------------------------------------[]
// Статистика за всё время существования сайта (только с Last-счётчиками):
	id			Loads					= NA;		// Статистика загрузок (т.е. все кроме ignored и mirror).
	id			Visitors				= NA;		// Кол-во приходов  на сайт.
	id			Hosts					= NA;		// Кол-во приходов на сайт новых посетителей или тех, что
													// пришли не рашьше, чем через сутки.
	
	id			Shows					= NA;		// Статистика показов баннеров на сайте.
	id			Clicks				= NA;		// Статистика нажатий баннеров на сайте.
	id			Clicks_Local		= NA;		// !!! Статистика нажатий баннеров на сайте в локальном времени зрителя.
	id			Hits					= NA;		// Статистика просмотров сайта.
	id			Hits_Local			= NA;		// !!! Статистика просмотров сайта в локальном времени зрителя.
	id			AnonymousHits		= NA;		// Статистика анонимных хитов сайта.
	id			SuspiciousHits		= NA;		// Статистика подозрительных хитов сайта.

	id			SessionTime			= NA;		// Продолжительность сессий.
	id			SessionTime_Local = NA;		// Продолжительность сессий в локальном времени зрителя.
	id			SessionNum			= NA;		// Количество сессий.

//----------------------------------------------------------------------------[] 
// Cчётчики:	
// Расширить до ластов. Поддержка в Counter_GetData, Site_New, Site_Delete, Site_Rate

	int		Total_Loads							= 0;	//	  Всего загрузок сайта за всё время. 
	int		Total_Hosts							= 0;	//   Всего зрителей сайта за время, меньшее суток.
	int		Total_Hits							= 0;	//   Всего (не подозрительных) хитов сайта.
	int		Total_AnonymousHits				= 0;	//   Всего анонимных посетителей сайта.
	int		Total_AnonymousHits_Prc			= 0;	//   Процент анонимных посетителей сайта от общего числа новых посетителей сайта.
	int		Total_SuspiciousHits_Prc		= 0;	//   Процент подозрительных хитов сайта от общего общего числа хитов на сайте (включая подозрительные).

	int		Total_Visitors						= 0;	//   Всего новых посетителей сайта.
	int		Total_VisitorReturns				= 0;	//   Всего возвратов на сайт.
   int		Total_VisitorReturns_Prc		= 0;	//   Процент возвратившихся посетителей сайта от общего числа посетителей сайта.

	int		Total_SessionNum					= 0;	//	  Количество сессий на сайте за весь период. SessionNum.
	int		Total_AveSessionTime				= 0;	//	  Средняя продолжительность сессии на сайте за весь период. SessionTime/SessionNum( LM, LD, ...).
	int		Total_AveReloadTime				= 0;	//	  Средняя продолжительность релоада на сайте за весь период. SessionTime/Total_Hits (LM, LD, ...).
	int		Total_AveReloadNum				= 0;	//	  Средняя количество релоадов за сессию на сайте за весь период. Total_Hits / SessionNum (LM, LD, ...).

	int		Total_Shows							= 0;	//   Всего показов баннеров на сайте.
	int		Total_Clicks						= 0;	//	  Всего нажатий баннеров на сайте.
	int		Total_CTR_Prc						= 0;	//   CTR баннеров на этом сайте за всё время.
	int		Total_CPH_Prc						= 0;	//   CPH баннеров на этом сайте за всё время.
														
//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Total без Last-аналогов (т.к. нет full-time счетчика)
	int		Total_AnonymousVisitors			= 0;	//   Всего анонимных посетителей сайта.
	int		Total_AnonymousVisitors_Prc	= 0;	//   Процент анонимных посетителей сайта от общего числа новых посетителей сайта.
	int		Total_VisitorExperience			= 0;	//   Общее количество посещённых сайтов всеми хостами данного сайта.
	int		Ave_VisitorExperience			= 0;	//   Среднее количество посещённых сайтов для хоста на данном сайте.
	int		OnlineVisitors						= 0;	//   Уникальных Хитов за последние 3 минуты.
	int		Total_MouseOver					= 0;	//   Подведений курсора к баннерам на этом сайте за всё время.
	int		Total_Votes							= 0;	//   Всего проголосовавших за сайт.
	int		Total_Votes_Sum					= 0;	//   Суммарная оценка голосования за сайт.
	int		Total_Votes_Ave					= 0;	//   Средняя оценка голосования за сайт.
//- - - - - - - - - - - - - - - - - - - - - - - - - - -]

//----------------------------------------------------------------------------[]
	int		LM_Loads								= 0;	//	  Всего загрузок сайта за последний месяц. 
   int		LM_Hosts								= 0;  //   Хостов на сайте за последний месяц.
   int		LM_Hits								= 0;	//   Хитов (не подозрительных) на сайте за последний месяц.  
	int		LM_AnonymousHits					= 0;	//   Анонимных хитов сайта за последний месяц.
	int		LM_AnonymousHits_Prc				= 0;	//   Процент анонимных хитов сайта за последний месяц от общего числа (не подозрительных) хитов за последний месяц.
	int		LM_SuspiciousHits_Prc			= 0;	//   Процент подозрительных хитов сайта за последний месяц от общего числа хитов за последний месяц (включая подозрительные).

	int		LM_Visitors							= 0;  //   Новых посетителей сайта за последний месяц. 
   int		LM_VisitorReturns					= 0;	//   Возвратов на сайт в течение месяца.
   int		LM_VisitorReturns_Prc			= 0;	//   Процент возвратившихся в течение месяца посетителей сайта от общего числа посетителей сайта в течение месяца.
														
	int		LM_SessionNum						= 0;	//	  Количество сессий на сайте за последний месяц.
	int		LM_AveSessionTime					= 0;	//	  Средняя продолжительность сессии на сайте за последний месяц.
	int		LM_AveReloadTime					= 0;	//	  Средняя продолжительность релоада на сайте за последний месяц.
	int		LM_AveReloadNum					= 0;	//	  Средняя количество релоадов за сессию на сайте за весь последний месяц.

	int		LM_Shows								= 0;	//	  Показов баннеров на сайте за последний месяц.
   int		LM_Clicks							= 0;  //   Нажатий баннеров на сайте за последний месяц.  
	int		LM_CTR_Prc							= 0;	//   CTR за последний месяц.
	int		LM_CPH_Prc							= 0;	//   CPH за последний месяц.
//----------------------------------------------------------------------------[]
	int		LW_Loads								= 0;	//	  Всего загрузок сайта за последнюю неделю.
   int		LW_Hosts								= 0;	//   Хостов на сайте за последнюю неделю.
   int		LW_Hits								= 0;	//   Хитов (не подозрительных) на сайте за последнюю неделю.  
	int		LW_AnonymousHits					= 0;	//   Анонимных хитов сайта за последнюю неделю.  
	int		LW_AnonymousHits_Prc				= 0;	//   Процент анонимных хитов сайта за последнюю неделю от общего числа (не подозрительных) хитов за последнюю неделю.
	int		LW_SuspiciousHits_Prc			= 0;	//   Процент подозрительных хитов сайта за последнюю неделю от общего числа хитов за последнюю неделю (включая подозрительные).  

	int		LW_Visitors							= 0;	//   Новых посетителей сайта за последнюю неделю.
   int		LW_VisitorReturns					= 0;	//   Возвратов на сайт в течение недели.
   int		LW_VisitorReturns_Prc			= 0;	//   Процент возвратившихся в течение недели посетителей сайта от общего числа посетителей сайта в течение недели.

	int		LW_SessionNum						= 0;	//	  Количество сессий на сайте за последнюю неделю.
	int		LW_AveSessionTime					= 0;	//	  Средняя продолжительность сессии на сайте за последнюю неделю.
	int		LW_AveReloadTime					= 0;	//	  Средняя продолжительность релоада на сайте за последнюю неделю.
	int		LW_AveReloadNum					= 0;	//	  Средняя количество релоадов за сессию на сайте за последнюю неделю.

	int		LW_Shows								= 0;	//	  Показов баннеров на сайте за последнюю неделю.
   int		LW_Clicks							= 0;  //   Нажатий баннеров на сайте за последнюю неделю.
	int		LW_CTR_Prc							= 0;	//   CTR за последнюю неделю.
	int		LW_CPH_Prc							= 0;	//   CPH за последнюю неделю.
//----------------------------------------------------------------------------[]
	int		LD_Loads								= 0;	//	  Всего загрузок сайта за последние сутки.
   int		LD_Hosts								= 0;	//   Хостов на сайте за последние сутки.
	int		LD_Hits								= 0;	//   Хитов (не подозрительных) на сайте за последние сутки.
	int		LD_AnonymousHits					= 0;	//   Анонимных хитов сайта за последние сутки.
	int		LD_AnonymousHits_Prc				= 0;	//   Процент анонимных хитов сайта за последние сутки от общего числа (не подозрительных) хитов за последние сутки.
	int		LD_SuspiciousHits_Prc			= 0;	//   Процент подозрительных хитов сайта за последние сутки от общего числа хитов за последние сутки (включая подозрительные).

	int		LD_Visitors							= 0;	//   Новых посетителей сайта за последние сутки.
   int		LD_VisitorReturns					= 0;	//   Возвратов на сайт в течение суток.  
   int		LD_VisitorReturns_Prc			= 0;	//   Процент возвратившихся в течение суток посетителей сайта от общего числа посетителей сайта в течение суток.
														
	int		LD_SessionNum						= 0;	//	  Количество сессий на сайте за последние сутки.
	int		LD_AveSessionTime					= 0;	//	  Средняя продолжительность сессии на сайте за последние сутки.
	int		LD_AveReloadTime					= 0;	//	  Средняя продолжительность релоада на сайте за последние сутки.
	int		LD_AveReloadNum					= 0;	//	  Средняя количество релоадов за сессию на сайте за последние сутки.

	int		LD_Shows								= 0;	//	  Показов баннеров на сайте за последние сутки.
   int		LD_Clicks							= 0;	//   Нажатий баннеров на сайте за последние сутки.
	int		LD_CTR_Prc							= 0;	//   CTR за последние сутки.
	int		LD_CPH_Prc							= 0;	//   CPH за последние сутки.
//----------------------------------------------------------------------------[]
	int		LH_Loads								= 0;	//	  Всего загрузок сайта за последний час. 
   int		LH_Hosts								= 0;	//   Хостов на сайте за последний час.
	int		LH_Hits								= 0;  //   Хитов (не подозрительных) на сайте за последний час.
	int		LH_AnonymousHits					= 0;	//   Анонимных хитов сайта за последний час.
	int		LH_AnonymousHits_Prc				= 0;	//   Процент анонимных хитов сайта за последний час от общего числа (не подозрительных) хитов за последний час.
	int		LH_SuspiciousHits_Prc			= 0;	//   Процент подозрительных хитов сайта за последний час от общего числа хитов за последний час (включая подозрительные).

	int		LH_Visitors							= 0;	//   Новых посетителей сайта за последний час. 
   int		LH_VisitorReturns					= 0;  //   Возвратов на сайт в течение часа.  
   int		LH_VisitorReturns_Prc			= 0;	//   Процент возвратившихся в течение часа посетителей сайта от общего числа посетителей сайта в течение часа.
														
	int		LH_SessionNum						= 0;	//	  Количество сессий на сайте за последний час.
	int		LH_AveSessionTime					= 0;	//	  Средняя продолжительность сессии на сайте за последний час.
	int		LH_AveReloadTime					= 0;	//	  Средняя продолжительность релоада на сайте за последний час.
	int		LH_AveReloadNum					= 0;	//	  Средняя количество релоадов за сессию на сайте за последний час.

	int		LH_Shows								= 0;	//	  Показов баннеров на сайте за последний час.
   int		LH_Clicks							= 0;  //   Нажатий баннеров на сайте за последний час.
	int		LH_CTR_Prc							= 0;	//	  CTR за последние сутки.
	int		LH_CPH_Prc							= 0;	//	  CPH за последние сутки.
//----------------------------------------------------------------------------[]
// Зарезервированные индексируемые поля:
	int		CustomIndex1						= 0;
	int		CustomIndex2						= 0;
	int		CustomIndex3						= 0;
	int		CustomIndex4						= 0;
	int		CustomIndex5						= 0;
	
//----------------------------------------------------------------------------[] 
// Пометки (для) модератора:
	bool		Allowed				= false;	// Информация пользователя разрешена модератором.
	byte		ObjectState			= 1;		// Состояние объекта: 0 - проверен; 1 - новый;
													//  2 - изменено критическое поле; 3 - изменён.

	byte		ba_ModeratorComment	[];	// Битовое поле комментариев модератора.

//----------------------------------------------------------------------------[]
// Зарезервировано для будущего использования:
	id			TagID					= NA;		
	bool		TagBool				= false;
	int		TagInt				= 0;
	id			ReservedID				[];
	int		ReservedInt				[];
	string	ReservedString			[];

//----------------------------------------------------------------------------[]
// Индексы:
	id			RatingPlaceInfo	= NA;		// ID класса RatingPlaceInfo с информацией по изменению 
													// позиции сайта в рейтингах.

//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
	index		[VBN, Name									];	// Этот индекс должен идти первым!
	index		[Alias										];
	index		[VBN, CreationTime						];
	index		[		LastVisitTime						];
	index		[		LastUpdateTime						];
	index		[VBN, Allowed, ObjectState				];
//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
	index		[VBN, -Total_Loads						];
	index		[VBN, -Total_Hosts						];
	index		[VBN, -Total_Hits							];
	index		[VBN, -Total_AnonymousHits				];
	index		[VBN, -Total_AnonymousHits_Prc		];
	index		[VBN, -Total_SuspiciousHits_Prc		];
	index		[VBN, -Total_Visitors					];
	index		[VBN, -Total_VisitorReturns			];
	index		[VBN, -Total_VisitorReturns_Prc		];
	index		[VBN, -Total_SessionNum					];
	index		[VBN, -Total_AveSessionTime			];
	index		[VBN, -Total_AveReloadTime				];
	index		[VBN, -Total_AveReloadNum				];
	index		[VBN, -Total_Shows						];
	index		[VBN, -Total_Clicks						];
	index		[VBN, -Total_CTR_Prc						];
	index		[VBN, -Total_CPH_Prc						];
	index		[VBN, -Total_AnonymousVisitors		];
	index		[VBN, -Total_AnonymousVisitors_Prc	];
	index		[VBN, -Total_VisitorExperience		];
	index		[VBN, -Ave_VisitorExperience			];
	index		[VBN, -OnlineVisitors					];
	index		[VBN, -Total_MouseOver					];
	index		[VBN, -Total_Votes						];
	index		[VBN, -Total_Votes_Sum					];
	index		[VBN, -Total_Votes_Ave					];
	index		[VBN, -LM_Loads							];
	index		[VBN, -LM_Hosts							];
	index		[VBN, -LM_Hits								];
	index		[VBN, -LM_AnonymousHits					];
	index		[VBN, -LM_AnonymousHits_Prc			];
	index		[VBN, -LM_SuspiciousHits_Prc			];
	index		[VBN, -LM_Visitors						];
	index		[VBN, -LM_VisitorReturns				];
	index		[VBN, -LM_VisitorReturns_Prc			];
	index		[VBN, -LM_SessionNum						];
	index		[VBN, -LM_AveSessionTime				];
	index		[VBN, -LM_AveReloadTime					];
	index		[VBN, -LM_AveReloadNum					];
	index		[VBN, -LM_Shows							];
	index		[VBN, -LM_Clicks							];
	index		[VBN, -LM_CTR_Prc							];
	index		[VBN, -LM_CPH_Prc							];
	index		[VBN, -LW_Loads							];
	index		[VBN, -LW_Hosts							];
	index		[VBN, -LW_Hits								];
	index		[VBN, -LW_AnonymousHits					];
	index		[VBN, -LW_AnonymousHits_Prc			];
	index		[VBN, -LW_SuspiciousHits_Prc			];
	index		[VBN, -LW_Visitors						];
	index		[VBN, -LW_VisitorReturns				];
	index		[VBN, -LW_VisitorReturns_Prc			];
	index		[VBN, -LW_SessionNum						];
	index		[VBN, -LW_AveSessionTime				];
	index		[VBN, -LW_AveReloadTime					];
	index		[VBN, -LW_AveReloadNum					];
	index		[VBN, -LW_Shows							];
	index		[VBN, -LW_Clicks							];
	index		[VBN, -LW_CTR_Prc							];
	index		[VBN, -LW_CPH_Prc							];
	index		[VBN, -LD_Loads							];
	index		[VBN, -LD_Hosts							];
	index		[VBN, -LD_Hits								];
	index		[VBN, -LD_AnonymousHits					];
	index		[VBN, -LD_AnonymousHits_Prc			];
	index		[VBN, -LD_SuspiciousHits_Prc			];
	index		[VBN, -LD_Visitors						];
	index		[VBN, -LD_VisitorReturns				];
	index		[VBN, -LD_VisitorReturns_Prc			];
	index		[VBN, -LD_SessionNum						];
	index		[VBN, -LD_AveSessionTime				];
	index		[VBN, -LD_AveReloadTime					];
	index		[VBN, -LD_AveReloadNum					];
	index		[VBN, -LD_Shows							];
	index		[VBN, -LD_Clicks							];
	index		[VBN, -LD_CTR_Prc							];
	index		[VBN, -LD_CPH_Prc							];
	index		[VBN, -LH_Loads							];
	index		[VBN, -LH_Hosts							];
	index		[VBN, -LH_Hits								];
	index		[VBN, -LH_AnonymousHits					];
	index		[VBN, -LH_AnonymousHits_Prc			];
	index		[VBN, -LH_SuspiciousHits_Prc			];
	index		[VBN, -LH_Visitors						];
	index		[VBN, -LH_VisitorReturns				];
	index		[VBN, -LH_VisitorReturns_Prc			];
	index		[VBN, -LH_SessionNum						];
	index		[VBN, -LH_AveSessionTime				];
	index		[VBN, -LH_AveReloadTime					];
	index		[VBN, -LH_AveReloadNum					];
	index		[VBN, -LH_Shows							];
	index		[VBN, -LH_Clicks							];
	index		[VBN, -LH_CTR_Prc							];
	index		[VBN, -LH_CPH_Prc							];

	index		[VBN, -CustomIndex1						];
	index		[VBN, -CustomIndex2						];
	index		[VBN, -CustomIndex3						];
	index		[VBN, -CustomIndex4						];
	index		[VBN, -CustomIndex5						];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Профиль сайта                                                             []               
[]                                                                            []
[]____________________________________________________________________________[]
*/

class SiteProfile
{
	string	Name;									// Название профиля.
	id 		Site							[];	// ID сайтов, пользующихся данным профилем.
	byte		VBN						= 255;
	time		LastModified			= 0;		// Время последней модификации профиля.
	id			OwnerID					= NA;		// Идентификатор пользователя-владельца.
											
	id			DefaultKeyword				[];	// Ключевые слова по умолчанию.
											
// Требования к баннерам			
	id 		BannerInclude				[];
	id 		BannerExclude				[];
	id 		SiteInclude					[];
	id 		SiteExclude					[];
											
	int		MaxFileSize				= 0;		// Максимальный размер файла с баннерами.
	bool		UseKeywords				= false;	// Показывать баннеры в соответствии с ключевыми словами сайтов.

	byte		ba_BannerConceptInclude	[];	// Список разрешённыx к показу концептов баннеров.
	byte		ba_BannerConceptExclude	[];	// Список запрещённых к показу концептов баннеров.

	byte	eba_BannerConcept				[];	// = BannerConceptInclude & ~BannerConceptExclude

	int		Price							[];	// Цены на сайтах профиля.
	bool		StaticSupport			= false;	// Поддержка статических баннеров.
		
// Пометки (для) модератора:
	bool		Allowed					= false;	// Информация пользователя разрешена модератором.
	byte		ObjectState				= 1;		// Состояние объекта: 0 - проверен; 1 - новый;
														//  2 - изменено критическое поле; 3 - изменён.
	byte		ba_ModeratorComment		[];	// Битовое поле комментариев модератора.

// Зарезервировано для будущего использования:
	id			TagID						= NA;		
	bool		TagBool					= false;
	int		TagInt					= 0;
	id			ReservedID					[];
	int		ReservedInt					[];
	string	ReservedString				[];

// Индексы:
	index		[VBN, Allowed, ObjectState];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]



/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Событие баннерной системы                                                 []                         
[]                                                                            []
[]____________________________________________________________________________[]
*/

class ShowEvent
{
	id			SiteID				= NA;		// ID сайта, на котором произошло событие.
	id			ViewerID				= NA;		// ID зрителя.
	time		Time					= 0;		// Время возникновения события (UTC).
	int		ExitCode				= 0;		// Код возврата из Counter_GetData.

// Зарезервировано для будущего использования:
	id			TagID					= NA;		
	int		TagInt				= 0;
	bool		TagBool				= false;
	string	ReservedString;

	index		[Time];
	index		[SiteID, ViewerID,	-Time];
	index		[SiteID, ViewerID];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Реестр перечисляемых объектов                                             []                             
[]                                                                            []
[]____________________________________________________________________________[]
*/
master class Registry:
{	
	string	AdminPassword;					// Администраторский пароль для доступа 
													// к функциям базы.
	
	id			ConceptID_Sorted		[];	// Размер этого массива равен количеству существующих на данный момент концептов.
	int		ConceptNo_SortID		[];

	id			ConceptID_SortNo		[];	// Размер этого массива никогда не уменьшается и 
													// равен количеству создававшихся концептов за
													// все время жизни базы.
	int		ConceptParent_SortNo	[];	// Номера родительских концептов.
	int		ConceptType_SortNo	[];	// Тип концептов c соответствующими номерами.
	int		ConceptLevel_SortNo	[];	// Уровни концептов c соответствующими номерами.


	id			Language					[];
	int		LanguageNo				[];	// не используется
	id			VBN						[];
	int		VBNNo						[];	// не используется
	id			ModeratorComment		[];
	int		ModeratorCommentNo	[];	// не используется

	int		CRA_InetAudience		[];	// Ненормированное распределение концептов зрителей.
	int		CRN_InetAudience		[];	// Нормированное распределение концептов зрителей.
	int		CRN_InetAudience_Update=0;	// Частота обновления CRN_InetAudience.

// Размеры массивов у сайта:
	int		VisitorHistoryLength = 20;	// Количество последних зрителей, хранящихся в статистике сайта.
	int		MinimumHitsTime		= 5;	// Минимальное время, за которое засчитывается хит.
	int		SuspiciousInfoSize	= 100;// Размер массивов в объектах класса SuspiciousInfo.
	int		ActiveViewersSize		= 20;	// Размер массивов Site::ActiveViewersID[] и Site::ActiveViewersHits[].
	int		ReturnNumRateSize		= 10;	// Макс. размер Site::ReturnNumRate.
	int		DailyReferrerSize		= 100;// Макс. размер Site::DailyReferrerStats[].

//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Размеры массивов у баннера:
	int		ClickNumRateSize		= 10;	// Макс. размер BannerProfile::ClickNumRate.
	int		ShowNumRateSize		= 10;	// Макс. размер BannerProfile::ShowNumRate.
	int		HitNumRateSize			= 10;	// Макс. размер BannerProfile::HitNumRate.
	int		SessionTimeRateSize	= 10;	// Макс. размер BannerProfile::SessionTimeRate.
	
//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Серверы, IP, агенты
	string	IgnoredIP				[];	// Игнориремые IP.
	string	IgnoredUserAgent		[];	// Игнорируемые юзерагенты.
	string	IgnoredBrowser			[];	// Игнорируемые названия броузеров.								
	string	SearchEngines			[];	// Поисковые серверы.
	string	Classifiers				[];	// Каталоги.

//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Параметры кеширования объектов:
	int		CachePurgeTime_IPRecord				= 0;	// Время кеширования объектов класса IPRecord.
	int		CachePurgeTime_RatingPlaceInfo	= 0;	// Время кеширования объектов класса RatingPlaceInfo.
	int		CachePurgeTime_SuspiciousInfo		= 0;	// Время кеширования объектов класса SuspiciousInfo.
	int		CachePurgeTime_SearchWordsInfo	= 0;	// Время кеширования объектов класса SearchWordsInfo.
	int		CachePurgeTime_DailyReferrerStats= 0;	// Время кеширования объектов класса DailyReferrerStats.
	int		CachePurgeTime_DayStats				= 0;	// Время кеширования объектов класса DayStats.
	int		CachePurgeTime_YearStats			= 0;	// Время кеширования объектов класса YearStats.
	int		CachePurgeTime_TimeStats			= 0;	// Время кеширования объектов класса TimeStats.
	int		CachePurgeTime_ModeratorComment	= 0;	// Время кеширования объектов класса ModeratorComment.
	int		CachePurgeTime_Keyword				= 0;	// Время кеширования объектов класса Keyword.
	int		CachePurgeTime_SiteList				= 0;	// Время кеширования объектов класса SiteList.
	int		CachePurgeTime_Concept				= 0;	// Время кеширования объектов класса Concept.
	int		CachePurgeTime_Language				= 0;	// Время кеширования объектов класса Language.
	int		CachePurgeTime_VBN					= 0;	// Время кеширования объектов класса VBN.
	int		CachePurgeTime_Site					= 0;	// Время кеширования объектов класса Site.
	int		CachePurgeTime_Page					= 0;	// Время кеширования объектов класса Page.
	int		CachePurgeTime_BannerProfile		= 0;	// Время кеширования объектов класса BannerProfile.
	int		CachePurgeTime_Banner				= 0;	// Время кеширования объектов класса Banner.
	int		CachePurgeTime_TradeStats			= 0;	// Время кеширования объектов класса TradeStats.
	int		CachePurgeTime_User					= 0;	// Время кеширования объектов класса User.
	int		CachePurgeTime_ViewerGroup			= 0;	// Время кеширования объектов класса ViewerGroup.
	int		CachePurgeTime_Viewer				= 0;	// Время кеширования объектов класса Viewer.
//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Для кеширования зрителей:

	int		ReloadTimeThreshold					= 300;// Если время возврата зрителя меньше этого порога, то инкрементируется Viewer::ReloadNum и увеличивается Viewer::AveReloadTime.
	float		ViewerCacheReloadThreshold			= 0.0;// Если Viewer::AveReloadTime меньше этого порога, то зритель кешируется.
	int		ReloadDistribution					[];	// [i]-тый элемент инкрементируется, если ReloadTime<Registry::ReloadTimeThreshold и Viewer::AveReloadTime составляет i% от ReloadTimeThreshold.
//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Все зрители:
	id			Viewers									[];	// Идентификаторы всех зрителей.

//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Дефолты для баннеров:
	float		DefaultPriority						= 0.0;

	int		BannerStore_Expire	= 7776000;	// Макс. время хранения у зрителя информации о баннерах.
	int		BannerStore_MaxLength= 1000;		// Макс. кол-во хранимых у зрителя баннеров.
	int		SiteStore_Expire		= 7776000;	// Макс. время хранения у зрителя информации о сайтах.
	int		SiteStore_MaxLength	= 1000;		// Макс. кол-во хранимых у зрителя сайтов.
	
	int		MaxDailyEventsDefault
										= 1000;	// Максимальное число событий в день
													// (которое может заказать пользователь).
//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Зарезервировано для будущего использования:
	id			TagID1				= NA;		
	id			TagID2				= NA;		
	id			TagID3				= NA;		
	bool		TagBool1				= false;
	bool		TagBool2				= false;
	bool		TagBool3				= false;
	int		TagInt1				= 0;
	int		TagInt2				= 0;
	int		TagInt3				= 0;
	id			ReservedID1				[];
	id			ReservedID2				[];
	id			ReservedID3				[];
	int		ReservedInt1			[];
	int		ReservedInt2			[];
	int		ReservedInt3			[];
	string	ReservedString1		[];
	string	ReservedString2		[];
	string	ReservedString3		[];
}
//____________________________________________________________________________[]



/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` Виртуальная баннерная сеть                                                []                          
[]                                                                            []
[]____________________________________________________________________________[]
*/

class VBN
{
	string	Password;							// Пароль для изменения настроек сети.
	string	Name;									// Название сети.
	string	Description;						// Описание сети.

	bool		IsModerated				= false;	// Является ли сеть премодерируемой.
											
	id			DefaultLanguage		= NA;		// ID языка сети по умолчанию.
	time		DefaultTZOffset		= 0;		// Часовой пояс по умолчанию.
											
	id			Owner						= NA;		// Владелец сети, которому идут проценты с показов.
											
	byte		ConceptMask					[];	// Маска для используемых в сети концептов.
											
	id			AdminEventList			= NA;		// События, требующие внимания администратора.
											
	byte		No							= 255;	// Номер сети.

// Статистика:

	int		OnlineVisitors			= 0;		// Уникальных Хитов за последние 3 минуты.
	id			ActiveViewersID		[];		// Сотня самых активных (по хостам) зрителей.
	int		ActiveViewersHosts	[];		// Соответствующее число хостов.

	
	id			Hits						= NA;		// Статистика просмотров сайтов сети.
	id			Hosts						= NA;		// Кол-во приходов на сайты сети новых посетителей или тех, что
														// пришли не рашьше, чем через сутки.
	id			Visitors					= NA;

	id			Shows						= NA;		// Статистика показов баннеров на сайтах сети.
	id			Clicks					= NA;		// Статистика нажатий баннеров на сайтах сети.

	id			SessionTime			= NA;			// Продолжительность сессий.
	id			SessionNum			= NA;			// Количество сессий.
														
//- - - - - - - - - - - - - - - - - - - - - - - - - -[]

	int		Total_Hosts				= 0;
	int		Total_Shows				= 0;
	int		Total_Clicks			= 0;
	int		Total_Hits				= 0;
	int		Total_Visitors			= 0;
	int		Total_VisitorReturns	= 0;

	int		Total_AveSessionTime	= 0;	//	  Средняя продолжительность сессии на сайтах за весь период. SessionTime/SessionNum( LM, LD, ...).
	int		Total_AveReloadTime	= 0;	//	  Средняя продолжительность релоада на сайтах за весь период. SessionTime/Total_Hits (LM, LD, ...).
	int		Total_AveReloadNum	= 0;	//	  Средняя количество релоадов за сессию на сайтах за весь период. Total_Hits / SessionNum (LM, LD, ...).

	int		LM_Visitors				= 0;	
	int		LM_VisitorReturns		= 0;	
	int		LM_VisitorReturns_Prc= 0;	
	int		LM_Hosts					= 0;	
	int		LM_Shows					= 0;	
	int		LM_Clicks				= 0;	
	int		LM_Hits					= 0;	

	int		LM_AveSessionTime		= 0;	//	  Средняя продолжительность сессии на сайтах за весь период. SessionTime/SessionNum( LM, LD, ...).
	int		LM_AveReloadTime		= 0;	//	  Средняя продолжительность релоада на сайтах за весь период. SessionTime/Total_Hits (LM, LD, ...).
	int		LM_AveReloadNum		= 0;	//	  Средняя количество релоадов за сессию на сайтах за весь период. Total_Hits / SessionNum (LM, LD, ...).

	int		LW_Visitors				= 0;	
	int		LW_VisitorReturns		= 0;	
	int		LW_VisitorReturns_Prc= 0;	
	int		LW_Hosts					= 0;	
	int		LW_Shows					= 0;	
	int		LW_Clicks				= 0;	
	int		LW_Hits					= 0;	

	int		LW_AveSessionTime		= 0;	//	  Средняя продолжительность сессии на сайтах за весь период. SessionTime/SessionNum( LM, LD, ...).
	int		LW_AveReloadTime		= 0;	//	  Средняя продолжительность релоада на сайтах за весь период. SessionTime/Total_Hits (LM, LD, ...).
	int		LW_AveReloadNum		= 0;	//	  Средняя количество релоадов за сессию на сайтах за весь период. Total_Hits / SessionNum (LM, LD, ...).

	int		LD_Visitors				= 0;	
	int		LD_VisitorReturns		= 0;	
	int		LD_VisitorReturns_Prc= 0;	
	int		LD_Hosts					= 0;	
	int		LD_Shows					= 0;	
	int		LD_Clicks				= 0;	
	int		LD_Hits					= 0;	

	int		LD_AveSessionTime		= 0;	//	  Средняя продолжительность сессии на сайтах за весь период. SessionTime/SessionNum( LM, LD, ...).
	int		LD_AveReloadTime		= 0;	//	  Средняя продолжительность релоада на сайтах за весь период. SessionTime/Total_Hits (LM, LD, ...).
	int		LD_AveReloadNum		= 0;	//	  Средняя количество релоадов за сессию на сайтах за весь период. Total_Hits / SessionNum (LM, LD, ...).

	int		LH_Visitors				= 0;	
	int		LH_VisitorReturns		= 0;	
	int		LH_VisitorReturns_Prc= 0;	
	int		LH_Hosts					= 0;	
	int		LH_Shows					= 0;	
	int		LH_Clicks				= 0;	
	int		LH_Hits					= 0;	

	int		LH_AveSessionTime		= 0;	//	  Средняя продолжительность сессии на сайтах за весь период. SessionTime/SessionNum( LM, LD, ...).
	int		LH_AveReloadTime		= 0;	//	  Средняя продолжительность релоада на сайтах за весь период. SessionTime/Total_Hits (LM, LD, ...).
	int		LH_AveReloadNum		= 0;	//	  Средняя количество релоадов за сессию на сайтах за весь период. Total_Hits / SessionNum (LM, LD, ...).

//----------------------------------------------------------------------------[] 

// Зарезервировано для будущего использования:
	bool		TagBool1					= false;
	bool		TagBool2					= false;
	id			TagID1					= NA;		
	id			TagID2					= NA;		
	int		TagInt1					= 0;
	int		TagInt2					= 0;
	float		TagFloat1				= 0.0;				
	float		TagFloat2				= 0.0;				
	string	TagString1					;
	string	TagString2					;

	id			ReservedID1				[];
	id			ReservedID2				[];
	int		ReservedInt1			[];
	int		ReservedInt2			[];
	string	ReservedString1		[];
	string	ReservedString2		[];

	index		[No];
	index		[Name];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` Language                                                                  []        
//                                                                            []
class Language
{
	string	Name							[];	// Массив названий языка.
	string	ShortName;							// Аббревиатура языка.
	int		No							= 1;
	index		[No];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` Concept                                                                   []       
//                                                                            []
class Concept
{
	string	Name							[];	//	Названия концепта на поддерживаемых языках.
	string	Description					[];	// Развёрнутое описание концепта.
//- - - - - - - - - - - - - - - - - - - - - - - - - -
											
	id			Parent					= NA;		// ID родительского концепта.
//- - - - - - - - - - - - - - - - - - - - - - - - - -
	
	id			Ancestor						[];	// ID концептов-предков с уровнем>2.
	int		AncestorNo					[];	// Номера концептов-предков с уровнем>2.
	int		AncestorWeight				[];	// Веса концептов-предков = уровень-2.

	id			AllAncestor					[];	// ID концептов-предков (всех).
	id			AllAncestorNo				[];	// Номера концептов-предков (всех).
//- - - - - - - - - - - - - - - - - - - - - - - - - -

	id			Child							[];	// ID концептов, являющихся непосредственными детьми.
	int		ChildNo						[];	// Номера концептов-детей.
//- - - - - - - - - - - - - - - - - - - - - - - - - -

	id			Descendant					[];	//	Список концептов, для которых данный является предком.
	int		DescendantNo				[];	//	Список номеров концептов, для которых данный является предком.
//- - - - - - - - - - - - - - - - - - - - - - - - - -

	int		Level						= -1;		//	Уровень концепта в дереве.
//- - - - - - - - - - - - - - - - - - - - - - - - - -

	string	ShortName;							// Аббревиатура.
	string	Type;									// Тип концепта.
	int		TypeNo					= -1;		// Номер типа концепта.
//- - - - - - - - - - - - - - - - - - - - - - - - - -
	id			VBN_ID						[];	//	ID виртуальных сетей, сайты которых имеют данную концепт.
	id			VBN_SiteList				[];	// ID объекта SiteList со списком сайтов из соответствующего
														// VBN в массиве VBN_ID, имеющих данный концепт.
	int		VBN_SiteListSize			[];	// Число сайтов с данным концептом по VBN-ам.
//- - - - - - - - - - - - - - - - - - - - - - - - - -
												
	int		ClickerConcept_Work		[];	// Распределение концептов зрителей, кликнувших на баннер с данным концептом в рабочее время.
	int		ClickerConcept_Home		[];	// Распределение концептов зрителей, кликнувших на баннер с данным концептом в нерабочее время.
	int		ClickerConcept_Night		[];	// Распределение концептов зрителей, кликнувших на баннер с данным концептом ночью.
//- - - - - - - - - - - - - - - - - - - - - - - - - -
											
	id			Ads_SiteID					[];	// ID сайтов, на которых показывались баннеры с данным концептом.
	int		Ads_ShowRate				[];	// Распределение показов баннеров с данным концептом на соответствующем сайте.
	int		Ads_ClickRate				[];	// Распределение кликов баннеров с данным концептом на соответствующем сайте.
	int		Ads_ViewRate				[];	// Распределение просмотров баннеров с данным концептом на соответствующем сайте.
//- - - - - - - - - - - - - - - - - - - - - - - - - -

	int		No							= -1;

//- - - - - - - - - - - - - - - - - - - - - - - - - -

// Зарезервировано для будущего использования:
	id			TagID						= NA;		
	int		TagInt					= 0;
	bool		TagBool					= false;
	id			ReservedID					[];
	int		ReservedInt					[];
	string	ReservedString				[];

	index		[Level];
	index		[No];
	index		[Type, Level, ShortName];
	index		[TypeNo];

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}

//______________________________________________________________________________
//
//` SiteList
//
class SiteList
{	
	id				Site					[];	//	ID	класса Site.

	time		CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]



//______________________________________________________________________________
//                                                                            []
//` Ключевое слово                                                            []              
//                                                                            []
class Keyword
{
	string		Word;							// Слово
	id				VBN_ID				[];	// ID виртуальных сетей из соответствующи
	id				VBN_SiteList		[];	// Сайты, имеющие это слово в числе ключевых (class SiteList).
	int			VBN_SiteListSize	[];	// Число сайтов по VBN-Ам.

	index			[Word];

	time			CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` Комментарий модератора                                                    []                      
//                                                                            []

class ModeratorComment
{
	string	Name						[];	//	Названия концепта на поддерживаемых языках.
	int		No						= -1;

	index [No];

	time			CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]




//______________________________________________________________________________
//                                                                            []
//` Объекты для хранения временной статистики                                 []                                         
//                                                                            []
class TimeStats /* sizeof = 3,000 | 41,000 */
{
	int			Total				  = 0;
	int			Year					[];				// Номер календарного года [0]=1999, [1]=2000, ...
	id				YearStats			[];				// Объекты соответствующей годовой статистики.

	int			TwoLastDaysMinute	[/* 2*24*60 = 2880 */];
	int			TwoLastDaysMinute_year			= 0;
	int			TwoLastDaysMinute_day_of_year	= 0;
	time			LastAccessTime		= 0;				// Время последнего доступа к счётчику
																// с перекалькуляцией Last-полей.

	time			CacheTime				= 0;	// Используется для кеширования объектов.
}
//----------------------------------------------------------------------------[] 
class YearStats /* sizeof = 2944 |  2944+366*96= 38,080 */
{
	int			DayTotal				[/*366*/];
	id				DayStats				[/*366*/];		// календарный день
	time			LastAccessTime		= 0;				// Время последнего доступа к счётчику
																// с перекалькуляцией Last-полей.

	time			CacheTime				= 0;	// Используется для кеширования объектов.
}
//----------------------------------------------------------------------------[] 
class DayStats /* sizeof = 96 */
{
	int			HourTotal			[/*24*/];
	time			LastAccessTime		= 0;				// Время последнего доступа к счётчику
																// с перекалькуляцией Last-полей.

	time			CacheTime				= 0;	// Используется для кеширования объектов.
}
//____________________________________________________________________________[]




//______________________________________________________________________________
//                                                                            []
//` Referrer                                                                  []        
//                                                                            []
class	Referrer
{
	id				CRC					= NA;
	string		Referrer;						// Собственно, реферрер.
	int			Count					= 0;		// Счетчик хитов с этого реферера.
	time			LastAccessTime		= 0;		// Время последнего хита с этого реферера.
														// для вычисления активных сайтов в инете.;)
	index			[CRC];									

	time			CacheTime			= 0;		// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` DailyReferrerStats                                                        []                  
//                                                                            []
// Информация по реферерам за сутки.
class DailyReferrerStats
{
	id				SiteID				= NA;		// ID сайта.
	id				Referrer				[];		// ID рефереров.
	int			Count					[];		// Счетчик рефереров.
	time			TimeStamp			= 0;		// Время, за которое отвечает этот объект.

	time			CacheTime			= 0;		// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` SearchWordsInfo                                                           []               
//                                                                            []
class SearchWordsInfo
{
	id				SiteID				= NA;		// ID сайта.
	string		Words					[];		// Поисковые слова для этого сайта.
	int			Count					[];		// Счетчики поисковых слов.
	time			LastAccessTime		[];		// Время последнего хита с этим словом.

	time			CacheTime			= 0;		// Используется для кеширования объектов.
}
//____________________________________________________________________________[]




//______________________________________________________________________________
//                                                                            []
//` SuspiciousInfo                                                            []              
//                                                                            []
class SuspiciousInfo
{
// Размер массивов определяет константой Registry::SuspiciousInfoSize.

	id				Site				= NA;		// ID сайта-владельца.
	int			Pointer			= 0;		// Указатель на следующий подлежащий изменению элемент массива.
	id				Viewer				[];	// ID посетителя, вызвавшего подозрительное событие.
	string		Referrer				[];	// URL страницы, на котором произошло событие.
	time			Time					[];	// Время возникновения подозрительного события.
	int			EventType			[];	// Тип подозрительного события:
													// 1 - накрутка (<5 сек),
													//	2 - несовпадение с зеркалом,
													// 3 - ignored IP.

	time			CacheTime		= 0;		// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` RatingPlaceInfo                                                           []               
//                                                                            []
class RatingPlaceInfo
{
	id				Site					= NA;		// ID сайта.

	int			LastHourPosition	[/* Size=24*CounterNum */];
														// Замеры мест по индексам за последние
														// 48 часов. Производятся ровно раз в 2 часа.
														// Начальная позиция информации по конкретному индексу = 
														//  + 24*(Pointer + номеру индекса - номер индекса [VBN,Name])
														// (Выход за границы 24 значений для каждого индекса
														// обрабатывается циклически).

	int			LHP_Pointer			= 0;		// Номер позиции последнего
														// замера LastHourPosition (0-23).
	
	float			LastDailyPosition	[/* Size=30*CounterNum */];
														// Среднесуточная позиция по индексам за последние 30 дней.
														// Считается из LastHourPosition раз в сутки.

	int			LDP_Pointer			= 0;		// Номер позиции последнего
														// замера LastDailyPosition (0-29).

	time			LDP_UpdateTime		= 0;		// Время последнего пересчета LastDailyPosition.

	float			DailyPositionDiff	= 0.0;	// Изменение среднесуточной позиции по сравнению с предыдущими сутками.

	time			CacheTime			= 0;		// Используется для кеширования объектов.
}
//____________________________________________________________________________[]



//______________________________________________________________________________
//                                                                            []
//` IPRecord                                                                  []        
//                                                                            []
class IPRecord
{
	int			Count				= 0;		// Счётчик хитов с этого диапазона IP.
	string		Mask;							// Маска диапазона адресов (т.е. адрес без последней цифры).
	string		First;						// Начало диапазона.
	string		Last;							// Конец диапазона.
	bool			Checked			= false;	// Проверено администратором

	id				ConceptID			[];	// Описание сети -- географические регионы, типы и сами организации. {Concept.Viewer.Region}
	int			ConceptNo			[];	// Описание сети -- географические регионы, типы и сами организации. {Concept.Viewer.Region}

	int			CRA_Audience		[];	// Распределение концептов аудитори из этого диапазона.
	int			CRA_Inquiry			[];	

	index			[Checked, Mask];
	index			[Checked, -Count];

	time			CacheTime		= 0;		// Используется для кеширования объектов.

//- - - - - - - - - - - - - - - - - - - - - - - - - - -]
// Счетчики:
	id				Hits					= NA;
	id				Hosts					= NA;
	id				Visitors				= NA;
	id				Anonymous			= NA;
	id				Suspicious			= NA;

	int			Total_Hits			= 0;
	int			Total_Hosts			= 0;
	int			Total_Visitors		= 0;
	int			Total_Anonymous	= 0;
	int			Total_Suspicious	= 0;

	int			LM_Hits				= 0;
	int			LM_Hosts				= 0;
	int			LM_Visitors			= 0;
	int			LM_Anonymous		= 0;
	int			LM_Suspicious		= 0;

	int			LW_Hits				= 0;
	int			LW_Hosts				= 0;
	int			LW_Visitors			= 0;
	int			LW_Anonymous		= 0;
	int			LW_Suspicious		= 0;

	int			LD_Hits				= 0;
	int			LD_Hosts				= 0;
	int			LD_Visitors			= 0;
	int			LD_Anonymous		= 0;
	int			LD_Suspicious		= 0;

	int			LH_Hits				= 0;
	int			LH_Hosts				= 0;
	int			LH_Visitors			= 0;
	int			LH_Anonymous		= 0;
	int			LH_Suspicious		= 0;
}
//____________________________________________________________________________[]

//______________________________________________________________________________
//                                                                            []
//` ViewerReference                                                           []               
//                                                                            []
// Ссылка на анонимные объекты зрителей.
class ViewerReference
{
	id				ViewerID			= NA;			// ID разделяемого объекта.
	string		IPAddress;						// IP адрес.
	id				IPAddressHash;					// CRC IP адреса.

	index			[IPAddressHash];
	time			CacheTime		= 0;			// Используется для кеширования объектов.
}
//____________________________________________________________________________[]


//______________________________________________________________________________
//                                                                            []
//` AbstractObject                                                            []              
//                                                                            []
class AbstractObject
{
	string		Type;
	string		Name;
	string		Header1;
	string		Header2;
	string		Header3;
	string		Body;

	index			[Type, Name, Header1, Header2, Header3];
}
//____________________________________________________________________________[]


/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[]` END OF FILE                                                               []           
[]                                                                            []
[]____________________________________________________________________________[]
*/