/*
________________________________________________________________________________
[]                                                                            []
[] This is a part of the PROJECT: 'ObjBase'                                   []
[] Copyright (C) 1999 W:Brain Software Inc.                                   []
[] All rights reserved.                                                       []
[] __________________________________________________________________________ []
[]                                                                            []
[] Name:            Lay.h                                                     []
[] Date:            14.03.99                                                  []
[] Author:          Roman V. Koshelev                                         []
[] Description:     Описание типов базы объектов
[]____________________________________________________________________________[]
*/



/*
________________________________________________________________________________
                                                                              []

- - - - - - КЛАССЫ - - - - - - 
class ClassName {}
	Создается класс с именем ClassName (i=0...N-1), соответствующий
	контроллер имеет имя OC_ClassName.

class ClassName [N] {}
   Создается N классов с именами OC_ClassName_i (i=0...N-1)

class A: class B,C {}
	Класс А неследует все поля класса В и С. Индексы не наследуются. 
	Контроллер класса A не наследуется от контроллеров классов B и C.

master class A {}
	Объект мастер-класса автоматически создаётся в единственном экземпляре.
	К нему не применимы операци создания (.New()), 
	инициализации (=id; .Open(),...), объект мастер-класса не может 
	быть удалён и не может иметь индексов. Для инициализации контроллера
	мастер-класса достаточно просто объявить объект-контроллер:
	{
		OC_Main oc_main;
		oc_main.DoSomething();
	}
	Может быть полезен для запоминания идентификаторов других объектов. см. Test29.


- - - - - - ТИПЫ - - - - - - 

string
   Строка переменной длины вида {N, C0, C2, ..., CN-1, 0} где N -- длина строки.
   
id = object = identifier
   32-разрядный беззнаковый. unsigned long.
	Исполльзуется для хранения ссылок на другие объекты.

тип_поля имя []
   Одномерный массив переменной длины, хранящий элементы допустимых типов (кроме массивов).

string field;
	Поле имеет строковый тип.

int field;
	Поле имеет целочисленный 32-разрядный знаковый тип.

float field;
	Поле имеет реальный 32-разрядный знаковый тип.

byte field;
	Поле имеет целочисленный 8-разрядный беззнаковый тип (0-255).

time field;
	Поле имеет целочисленный 32-разрядный знаковый тип (по сути, тоже что и int).

bool field;
	Поле имеет булевский тип. Допустимые значения: true false.


- - - - - - ИНДЕКСЫ - - - - - - 

index [f1, f2, .. fn];
   Задаёт способ сортировки объектов по полям. Используется 
	сортировка "от меньшего к большему". Индексы не наследуются. 
	Максимальное число ключей в индексе (индексируемых полей) 
	определяется константой MAX_KEY_NUM_IN_INDEX ("ObjDriver.h")
	При создании контроллера, его текущим индексом автоматически
	становится первый из описанных индексов. Потом текущий индекс
	можно сменить.



- - - - - - ЗАНЧЕНИЯ ПО УМОЛЧАНИЮ - - - - - - 

type field = value;
   Для каждого поля может быть определено значение по умолчанию,
   которое прописывается в него при создании нового объекта.
	Не применимо к массивам.

[]____________________________________________________________________________[]
*/




class Test_sort
{
   int		n1;
   int		n2;
   int		n3;
//	index 	[n1,n2,n3];
	index 	[n1, -n2, n3];
}
/*

class Test_int
{
   int	ival = -1;
	index 	[ival];
}


master class Master
{
   id    SlaveObjectID[];
}

class Slave:
{
   int   Number;
}

class MyObject:
{
   int   Number;
}

class Array
{
   int	i[];
}

class Test_int_float:
{
   int	ival = 0;
   float	fval = 3.14;

	index [ival];
	index [fval];
}


class Test0:
{
   bool		Flag		= false;
   string	Name		= "Test0";
   int		Number	= 0;
	byte		Age		= 0;

   id			References	[];
   string	Text			[];

	index		[Age];
	index		[Flag];
	index		[Name, Flag];
	index		[Number, Name, Flag, Age];
}




class Test1:
{
   bool		Flag		= true;
   string	Name		= "Test1";
   int		Number	= 3;
	byte		Age		= 3;

   id			References	[];
   string	Text			[];
}
*/
/*

//===========================================================
virtual class Event[2]:
{
   id   Page;
   id   Banner;
   int  Viewer;
   int  Time;

   index [Time];
   index [Viewer,Banner];
   index [Page,Viewer];
}
//===========================================================
*/



/*

//===========================================================
class User:               // Пользователь.
{
                           // Общее
   id			userID;           // ID - уникальный идентификатор пользователя
   string   login;            // Имя для входа в сеть
   string   password;         // Пароль для входа в сеть
	string   fullname;         // Полное имя пользователя
   bool     interfaceType;    // Интерфейс пользователя (быстрый/точный)
                              //   - для express: оговорить поля, которые не показывать.
                              //      и значения по умолчанию для скрытых полей.
   bool     Available=false;  // Доступен/недоступен - адм.

                           // Координаты
   string   email="a@b.c";    // Email
   string   phone;            // Телефон
   string   fax;              // Fax
   string   address;          // Адрес
   string   url               // URL-Адрес
            = "http://www.mycompany.com";
   string   comment;          // Комментарий

                             // Оповещение
   int      notifyFreq;				// Как часто присылать статистику (не надо/ каждый день/неделю/месяц)
   bool     notifyHTML;				// Присылать ли статистику в виде HTML
   int      notifyDepth;			// Тип присылаемой статистики (её развёрнутость, глубина)


                             // Объекты
   object   pages    [];			// Список страниц пользователя, предоставляемых для размещения рекламы сети
   id       banners  [];			// Список баннеров, рекламирующих страницы пользователя
   id       resources[];			// Список ресурсов, рекламируемых баннерами
	
   index    [login, password];
	index    [userID];

//   Баланс.
//      Приход показов/просмотров/откликов по дням  (число показов баннеров сети на своих сайтах).
//         Вчера (по часам), за неделю, за месяц, за сто дней.
//      Расход показов/просмотров/откликов по дням  (число показов своих  баннеров в сети).
//         Вчера (по часам), за неделю, за месяц, за сто дней.
//      Число проданных показов/кликов.
//         Когда, сколько, кому.
//      Число купленных показов/кликов.
//         Когда, сколько, у кого.
//      Общее число оставшихся показов.
//      Общее число оставшихся кликов.
}
//===========================================================
*/

/*
//===========================================================
class PowerUser[1]: User, Event_1   // Крутой пользователь. Наследован от User и Event.2
{
   index      [userID, login, fullname];
   index      [Page, login];

   index      [address, Page, login];

   string     address1[];
}
//===========================================================
*/
/*______________________________________________________________________________
[]                                                                            []
[]                                                                            []
[] END OF FILE                                                                []
[]                                                                            []
[]____________________________________________________________________________[]
*/